

import java.awt.Rectangle;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;

public class OriginalImage {
	public OriginalImage(ByteBuffer b, int width, int height) {
		this.pixels = b;
		this.width = width;
		this.height = height;
	}
	
	public int getGreyPixelABGR(int x, int y) { 
		int l = getPixelLum(x, y);
		return l << 16 | l << 8 | l;
	}
	
	public void clearPixel(int x, int y) { 
		int i = (x + y * width) * 2;
		pixels.put(i, (byte) 0);
	}
	public int getPixelABGR(int x, int y) { 
		byte [] yuv = new byte[4];
		byte [] rgb = new byte[6];
		int i = (x + y * width) * 2;
		for(int o = 0; o < yuv.length; o++) { 
			yuv[o] = pixels.get((i - (i % 4)) + o);
		}
		yuv422torgb24(yuv, rgb);
		
		int oi = (i % 4) ==  0 ? 0 : 3;
		return (((int)rgb[oi + 2] & 0xff) << 16) | (((int)rgb[oi + 1] & 0xff) << 8) | ((int)rgb[oi] & 0xff);
	}

	public int getPixelLum(int x, int y) { 
		int i = (x + y * width) * 2;
		return (int)pixels.get(i) & 0xff;
	}
	
	public int width, height;
	private ByteBuffer pixels;
	
	void yuv422torgb24(byte []in, byte []out) {
		// This seems to work best so fr
		int Y1 = (int)in[0] & 0xff;
		int V = (int)in[1] & 0xff;
		int Y2 = (int)in[2] & 0xff;
		int U = (int)in[3] & 0xff;

		int R, G, B, C, D, E;
		
		int Y = Y1;
		
		C = Y - 16;
		D = U - 128;
		E = V - 128;

		R = clamp((298 * C + 409 * E + 128) >> 8);
		G = clamp((298 * C - 100 * D - 208 * E + 128) >> 8);
		B = clamp((298 * C + 516 * D + 128) >> 8);
		
		out[0] = (byte)R;
		out[1] = (byte)G;
		out[2] = (byte)B;
		
		Y = Y2;
		
		C = Y - 16;
		D = U - 128;
		E = V - 128;

		R = clamp((298 * C + 409 * E + 128) >> 8);
		G = clamp((298 * C - 100 * D - 208 * E + 128) >> 8);
		B = clamp((298 * C + 516 * D + 128) >> 8);
		
		out[3] = (byte)R;
		out[4] = (byte)G;
		out[5] = (byte)B;	
	}

	int clamp(int x) { 
		if (x < 0) return 0;
		if (x > 255) return 255; 
		return x;
	}

	public byte getR(int x, int y) {
		// TODO Auto-generated method stub
		return 0;
	}
	public byte getG(int x, int y) {
		// TODO Auto-generated method stub
		return 0;
	}
	public byte getB(int x, int y) {
		// TODO Auto-generated method stub
		return 0;
	}

	public void putPixel(int x, int y, int p) {
		int i = (x + y * width) * 2;
		pixels.put(i, (byte)p);
		// TODO Auto-generated method stub
	}

	public byte[] getHslRect(Rectangle redSa) {
		// TODO Auto-generated method stub
		//LazyHslConvert hsl = new LazyHslConvert(redSa.width, redSa.height);
        //hsl.convertHsl(hslpic, 0, 0, redSa.width, redSa.height);
		return null;
	}

	public OriginalImage deepCopy() {
		ByteBuffer bb = ByteBuffer.allocate(pixels.capacity());
		pixels.rewind();
		bb.rewind();
		bb.put(pixels);
		return new OriginalImage(bb, width, height);
	}

	public void writeOut(FileChannel channel) {
		
	}

	public void dimPixel(int x, int y) {
		int i = (x + y * width) * 2;
		pixels.put(i, (byte)(((int)pixels.get(i) & 0xff) * 5 / 6));		
	}

}
