
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.Point;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

// Finished rough implementation.  This doesn't look promising:
// 1) The canny image template matching error vs. x/y doesn't appear smooth and well behaved
// like matching an RGB template.  Currently, this seems to neccessitate an exhaustive search
// over an optimized search
//
// The template does still seem to drift over time
//
// TODO- still try correlation instead of pixel error


class TemplateDetectCannyCorrelation extends TemplateDetect {
	int width, height;
	int frame = 0;
	static final int bpp = 1;
	boolean debug = false;
	double [] mask = null;
	double maskDecay = 0.95;
	BufferedWriter f2 = null;
	boolean active = true; // tmp- not used
	LazyHslConvert hsl = null;	
	
	CannyEdgeDetector canny = null;

	BufferedImageDisplay debugDisplay, debugDisplay2, debugDisplay3;

	TemplateDetectCannyCorrelation(int w, int h) { 
		hsl = null; //new LazyHslConvert(w, h); 
		width = w; 
		height = h;
		debugDisplay = new BufferedImageDisplay(w, h, BufferedImage.TYPE_BYTE_GRAY);
		debugDisplay2 = new BufferedImageDisplay(w, h, BufferedImage.TYPE_BYTE_GRAY);
		debugDisplay3 = new BufferedImageDisplay(w, h, BufferedImage.TYPE_3BYTE_BGR);

		canny = new CannyEdgeDetector();
	} 
	
	Tile scaleTile(Tile in, int scale) { 
		int xs = in.loc.width + scale;
		int ys = in.loc.height + scale;
		//(int)Math.round(xs * in.loc.height / in.loc.width);
		if (xs < 2 || ys < 2)
			return null;

		Tile out = new Tile();
		out.loc = new Rectangle(0, 0, xs, ys);
		out.data = new byte[out.loc.width * out.loc.height * bpp];
		
		BufferedImage inImg = new BufferedImage(in.loc.width, in.loc.height, BufferedImage.TYPE_BYTE_GRAY);
		BufferedImage outImg = new BufferedImage(out.loc.width, out.loc.height, BufferedImage.TYPE_BYTE_GRAY);
		
		inImg.getWritableTile(0, 0).setDataElements(0, 0, in.loc.width, in.loc.height, in.data);
		Graphics2D g = outImg.createGraphics();
		AffineTransform at = AffineTransform.getScaleInstance((double)out.loc.width / in.loc.width,
				(double)out.loc.height / in.loc.height);
		g.drawRenderedImage(inImg, at);
		
		outImg.getTile(0, 0).getDataElements(0, 0, out.loc.width, out.loc.height, out.data);
		out.scale = scale;
		return out;
	}
		
	byte [] copyRect(byte []in, Rectangle r, int bppin) {
		byte [] rpic = new byte[r.width * r.height * bppin];
		for(int x = 0; x < r.width; x++) { 
			for(int y = 0; y < r.height; y++) { 
				for(int b = 0; b < bppin; b++) { 
					rpic[(x + y * r.width) * bppin + b] = 
						in[(r.x + x + (r.y + y) * width) * bppin + b];
				}
			}
		}	
		return rpic;
	}

	byte [] convertToBlurredCannyGreyscale(byte [] in, Rectangle r) { 
		final int bppin = 3;
		
		canny.setContrastNormalized(false);
		canny.setLowThreshold(threshold2);
		canny.setHighThreshold(threshold1);
		canny.setGaussianKernelRadius(gaussianKernelRadius);
		canny.setGaussianKernelWidth(gaussianKernelWidth);

		Rectangle rplus = (Rectangle)r.clone();
	
		canny.makeKernel(canny.gaussianKernelRadius, canny.gaussianKernelWidth);
		int border = canny.kwidth * 2;
		rplus.x -= border;
		rplus.width += border * 2;
		rplus.y -= border;
		rplus.height += border * 2;
		byte []rpic = copyRect(in, rplus, bppin);
		
		
		canny.zones.height = rplus.height;
		canny.zones.clear();
		//canny.processData(rplus.width, rplus.height, rpic);
		canny.process3();	

		boolean inBounds = r.x >= 0 && r.y >= 0 && r.x + r.width < width && r.y + r.height < height;
		inBounds = false;
		
		int [] cdata = canny.getData();
		GaussianKernel gk = new GaussianKernel(.8f, 10, rplus.width, rplus.height);
		for(int i = 0; i < cdata.length; i++) 
			cdata[i] &= 0xffffffff;

		for(int i = 0; i < cdata.length; i++) 
			cdata[i] &= 0xff;
		gk.blur(cdata);
		for(int i = 0; i < cdata.length; i++) {
			int x = cdata[i] & 0xff;
			cdata[i] = (x << 16) | (x << 8) | x | 0xff000000;
		}
	
		byte [] rval = new byte[r.width * r.height * bpp];
		for(int x = 0; x < r.width; x++) {
			for(int y = 0; y < r.height; y++) {  
				rval[x + y * r.width] = 
					(byte)(cdata[x + border + (y + border) * rplus.width] & 0xff);
			}
		}
		
		debugDisplay.redraw();
		debugDisplay2.redraw();
		return rval;
		
	}
	
	@Override
	void setTemplate(byte [] pic, Rectangle r) {
		if (hsl != null) 
			hsl.convertHsl(pic, r.x, r.y, r.x + r.width, r.y + r.height);

		debugDisplay3.setData(r, copyRect(pic, r, 3));
		template.loc = new Rectangle(r);
		template.data =  convertToBlurredCannyGreyscale(pic, r);
		mask = new double[r.width * r.height];
	
		
		debugDisplay2.setData(template.loc, template.data);
		scaledTiles.buildScaledTiles(template);
		
		scaledTiles.initialized = true;
	}

	@Override
	void newFrame(byte []pic) {
		if (hsl != null) 
			hsl.clear();
		/*
		if (!scaledTiles.initialized) {
			scaledTiles.buildScaledTiles(template);
			scaledTiles.initialized = true;
		}
		*/
		//convertHsl(pic, 0, 0, width, height);
		//System.out.printf("************ New Frame\n");
	}
			
	class ScaledTilesArray { 
		private Tile [] scaledTiles = new Tile[201];

		public Tile getTileByScale(int s) { 
			int i = s + scaledTiles.length / 2;
			if (i >= 0 && i < scaledTiles.length) 
				return scaledTiles[i];
			else
				return null;
		}
		public int maxScale() { return scaledTiles.length - (scaledTiles.length / 2) + 1; }
		public int minScale() { return -(scaledTiles.length / 2); } 
		
		public void buildScaledTiles(Tile t) { 
			for(int i = 0; i < scaledTiles.length; i++) { 
				int scale =  i - scaledTiles.length / 2;
				scaledTiles[i] = scaleTile(t, scale);
			}

		
		}
		boolean initialized = false;
	}	
	ScaledTilesArray scaledTiles = new ScaledTilesArray();

	boolean legalIndex(int pi) { 
		return pi >= 0 && pi < width * height * bpp;
	}
	
	// interpolate a pixel value from non-integer rectangle
	int interpolatePixel(byte []pic, double x1, double y1, double x2, double y2, int b) { 
		int ix1 = (int)Math.floor(x1);
		int iy1 = (int)Math.floor(y1);
		int ix2 = (int)Math.ceil(x2);
		int iy2 = (int)Math.ceil(y2);

		if (ix1 < 0 || ix2 > width || iy1 < 0 || iy2 > height)
			return 0;

		double sum = 0;
		for (int x = ix1; x < ix2; x++) { 
			for (int y = iy1; y < iy2; y++) { 
				double fx = x2 - x;
				double fy = y2 - y;
				
				if (fx > 1.0) fx = 1.0;
				if (fy > 1.0) fy = 1.0;
					
				if (x == ix1) fx -= x1 - ix1;
				if (y == iy1) fy -= y1 - iy1; 
				
				int pixel = (int)pic[(x + y * width) * bpp + b] & 0xff;
				sum += pixel * fx * fy;
			}
		}
		sum /= (x2 - x1) * (y2 - y1);
		return (int)Math.round(sum);
	}

	boolean normalize = true;
	// relative weights of the rgb or hsl bytes in calculating error
	double [] byteWeights = new double[] {1.0, 1.0, 1.0};


	// note- testTilePrescale does not implement makeMask functionality
	// TODO- normalize saturation and/or luminescensce 
	FindResult testTilePrescale(byte []pic, int x, int y, int s, double already, boolean makeMask) { 
		FindResult r = null;
		Tile t = scaledTiles.getTileByScale(s);
		
		if (t != null) { 
			int pixels = t.loc.height * t.loc.width;
			int [] TT = new int[bpp], TP = new int[bpp], T = new int[bpp], PP = new int[bpp], P = new int[bpp];
			int score = 0;
			int var = 0;
			int [] last = new int[3];
		
			already = -1;  // already does not work with one-pass normalization
			
			if (already != -1)
				already *= pixels;
			
			for(int y1 = 0; y1 < t.loc.height; y1++) { 
				for(int x1 = 0; x1 < t.loc.width; x1++) {
					int px = x - t.loc.width / 2 + x1;
					int py = y - t.loc.height /2 + y1;
					int pi = (px + py * width) * bpp;
					int ti = (x1 + y1 * t.loc.width) * bpp;
					if (legalIndex(pi)) {
						if (hsl != null)
							hsl.verifyPixelConverted(px, py);				
						for(int b = 0; b < bpp; b++) {
							int pp = ((int)pic[pi] & 0xff);
							int pt = ((int)t.data[ti] & 0xff);
							if (hsl != null) { // H value is angular value, no error more than 180 degrees
								int err = pt - pp;
								if (err > 127) err = (255 - err) * 2;
								if (err < -127) err = (255 + err) * 2;
								score += err * err; 
							} else {
								TT[b] += pt * pt;
								PP[b] += pp * pp;
								TP[b] += pt * pp;
								T[b] += pt;
								P[b] += pp;
							}		
							pi++;
							ti++;
						}
					}
					if (already != -1 && score > already) 
						return new FindResult(x, y, s, score / pixels);;
					
				}
			}

			for(int b = 0; b < bpp; b++) { 
				if (b != 0 || hsl == null) {
					int diffAvg = (T[b] - P[b]) / pixels;
					int pAvg = P[b] / pixels;
					score += TT[b] + PP[b] - 2 * TP[b] +  2 * P[b] * diffAvg - 2 * T[b] * diffAvg 	
						+ diffAvg * diffAvg * pixels;
					var += PP[b] - 2 * pAvg + pAvg * pAvg * pixels;
				}
			}
			var /= pixels;
			score /= pixels;
			
//			System.out.printf("rscore = %.1f, score = %.1f  %.1f/%.1f\n", rscore, score,
//					T[1] / t.loc.width / t.loc.height, (double)tavg[1]);

			//System.out.printf("%d,%d,%s %d\n", x, y, s, score);
			r = new FindResult(x, y, s, score, var);
		
		}
		return r;
	}

	
	
	// May still be a good idea because it is cleaner and since the template scale doesn't change much, 
	// would be easier to maintain a quality mask on the template. 
	//
	// This function hasn't been maintained to follow new features added to testTilePrescale.  Needs hsl
	// code
	// 
	// Probably doesn't support non-square teplates yet 
	
	FindResult testTileJitBROKEN(byte []pic, int x, int y, int s, double already, boolean makeMask) { 
		Tile t= template;
		int score = 0;
		
		if (already != -1)
			already *= t.loc.width * t.loc.height;
		
		for(int y1 = 0; y1 < t.loc.height; y1++) { 
			for(int x1 = 0; x1 < t.loc.width; x1++) { 
				double px1 = x - ((double)(t.loc.width / 2 - x1)) * (t.loc.width + s) / t.loc.width;
				double py1 = y - ((double)(t.loc.height / 2 - y1)) * (t.loc.height + s) / t.loc.height;
				double px2 = x - ((double)(t.loc.width / 2 - x1 - 1)) * (t.loc.width + s) / t.loc.width;
				double py2 = y - ((double)(t.loc.height / 2 - y1 - 1)) * (t.loc.height + s) / t.loc.height;
				
				double pixelError = 0;
				//for(int b = 1; b < 2; b++) { 
				for(int b = 0; b < bpp; b++) { 
					int err = ((int)t.data[(x1 + y1 * t.loc.width) * bpp + b] & 0xff) - 
						interpolatePixel(pic, px1, py1, px2, py2, b);
					if (b == 0 && hsl != null) { // H value is angular value, no error more than 180 degrees
						if (err > 127) err = 255 - err;
						if (err < -127) err = 255 + err;
					}
					pixelError += err * err;
				}
				score += pixelError;

				if (makeMask)  
					mask[x1 + y1 * t.loc.width] += pixelError;
				if (mask[x1 + y1 * t.loc.width] < 10000)
					score += pixelError;
				if (already != -1 && score > already) 
					return new FindResult(x, y, s, score / t.loc.width / t.loc.height);					
			}
		}
		return new FindResult(x, y, s, score / t.loc.width / t.loc.height);
	}

	
	FindResult testTile(byte []pic, int x, int y, int s, double already, boolean makeMask) {		
		int x1 = x - (template.loc.width + s) / 2;
		int x2 = x + (template.loc.width + s) / 2;
		int y1 = y - (template.loc.height + s) / 2;
		int y2 = y + (template.loc.height + s) / 2;
			
		if (x1  < 0 || y1 < 0 || x2 >= width || y2 >= height) 
			return null;

		if (hsl != null) 
			hsl.convertHsl(pic, x1, y1, x2 + 1, y2 + 1); // +1 b/c for negative scales, seems testFilePrescale ends up out of bounds by one
		if (jit)
			return testTileJitBROKEN(pic, x, y, s, already, makeMask);
		else
			return testTilePrescale(pic, x, y, s, already, makeMask);		
	}
	
	// startAt must already be a valid findResult, with a valid score, for starting coordinate x,y,s
	// searches for a local minimum unidirectionally towards the vector dx,dy,ds
	// Will pass up to "allow" worse scores to find a new best score
	boolean moveToBetter(FindResult startAt, byte []pic, int dx, int dy, int ds, int r) { 
		FindResult best = startAt;
		final int allow = 3;
		int pass = allow;
		int x = startAt.x;
		int y = startAt.y;
		int s = startAt.scale;
		while(r-- > 0) {
			x += dx;
			y += dy;
			s += ds;
			startAt.compares++;
			FindResult next = testTile(pic, x, y, s, best.score, false);
			if (next != null) { 
				if (next.score > best.score) { 
					if (pass-- == 0) 
						break;
				} else { 			
					best = next;
					pass = allow;
				}
			}
		}
		
		if (startAt.score == best.score) 
			return false;
		int c = startAt.compares;
		startAt.copy(best);
		startAt.compares = c;
		return true;
	}
	
	// search bidrectionally from the startAt point for a local minimum back and forth 
	// along the vector dx,dy,dz.   startAt must already be a valid find result with 
	// a valid score for the starting coordinate x,y,z
	void bidirMoveToBetter(FindResult startAt, byte []pic, int dx, int dy, int ds, int r) { 
		if (!moveToBetter(startAt, pic, dx, dy, ds, r))
			moveToBetter(startAt, pic, -dx, -dy, -ds, r);
	}
	
	// Do a greedy search from the starting point on each axis in turn, keep 
	// iterating until result does not change. 
	FindResult findOptimized(FindResult startAt, byte []pic) {
		FindResult r = testTile(pic, startAt.x, startAt.y, startAt.scale, -1, false);
		if (r != null)
			startAt.copy(r);
		
		for(int i = 0; i < 10; i++) {
			double orig = startAt.score;
			bidirMoveToBetter(startAt, pic, 1, 1, 0, searchDist.x);
			bidirMoveToBetter(startAt, pic, 1, -1, 0, searchDist.x);
			bidirMoveToBetter(startAt, pic, 0, 1, 0, searchDist.x);
			bidirMoveToBetter(startAt, pic, 1, 0, 0, searchDist.x);
			//bidirMoveToBetter(startAt, pic, -2, 1, 0, searchDist.x / 2);
			//bidirMoveToBetter(startAt, pics, 2, 1, 0, searchDist.x / 2);
			//bidirMoveToBetter(startAt, pic, -1, 2, 0, searchDist.x / 2);
			//bidirMoveToBetter(startAt, pic, 1, 2, 0, searchDist.x / 2);
			bidirMoveToBetter(startAt, pic, 0, 0, 1, searchDist.scale);
			if (orig == startAt.score) 				
				break;
		}
		return startAt;
	}
	
	void trainTemplate(byte []pic, FindResult startAt) { 
		testTileJitBROKEN(pic, startAt.x, startAt.y, startAt.scale, -1, true);
		for(int i = 0; i < mask.length; i++)
			mask[i] *= maskDecay;
		dumpMask();
	
	}
		
	void dumpMask() { 
		BufferedWriter f;
		try {
			f = new BufferedWriter(new FileWriter(String.format("/tmp/tm-%04d.dat", frame)));

			for(int x = 0; x < template.loc.width; x++) { 
				for(int y = 0; y < template.loc.height; y++) { 
					f.write(String.format("%d %d %.1f\n", x, y, mask[x + y * template.loc.width]));
				}
				f.write("\n");
			}
			f.flush();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	
	FindResult findBruteForce(FindResult startAt, byte [] pic) { 
		FindResult best = null;

		// simple brute-force exhaustive search of the searchDist space
		for (int s = startAt.scale - searchDist.scale; s <= startAt.scale + searchDist.scale; s++) { 
			Tile t = scaledTiles.getTileByScale(s);	
			if (t != null) {
				for(int x = startAt.x - searchDist.x; x <= startAt.x + searchDist.x; x++) {
					for(int y = startAt.y - searchDist.y; y <= startAt.y + searchDist.y; y++) { 
						FindResult fr = testTile(pic, x, y, t.scale,/*r == null ? -1 : r.score*/ - 1, false);
						if (best == null || (fr != null && fr.score < best.score)) { 
							best = fr;
						}
					}
				}
			}
		}
		if (best != null) 
			startAt.copy(best);
		return best;
	}

	
	// Write out an x,y vs. score chart file suitable for gnuplot.  Also returns FindResult
	// from exhaustive search of searchDist area
	// todo - also make x,s vs score and y,s vs score graphs
	FindResult makeChartFiles(FindResult startAt, byte [] pic, String writeFile) { 
		int bestScale = 0;
		FindResult best = startAt;
		
		try {
			// re-iterate around the best result, writing files for charts showing each of the xy, xs, and ys vs score
			if (best != null && writeFile != null) { 
				BufferedWriter f = new BufferedWriter(new FileWriter(String.format(writeFile, frame, "xy")));
				for(int x = startAt.x - searchDist.x; x <= startAt.x + searchDist.x; x++) {
					for(int y = startAt.y - searchDist.y; y <= startAt.y + searchDist.y; y++) { 
						int ox = x - (startAt.x - searchDist.x);
						int oy = y - (startAt.y - searchDist.y);
						Tile t = scaledTiles.getTileByScale(best.scale);	
						FindResult fr = testTile(pic, x, y, t.scale,/*r == null ? -1 : r.score*/ - 1, false);
						f.write(String.format("%d %d %d\n", ox, oy, fr == null ? 0 : fr.score));
					}
					f.write("\n");
				}
				f.close();
				
				f = new BufferedWriter(new FileWriter(String.format(writeFile, frame, "xs")));
				for(int x = startAt.x - searchDist.x; x <= startAt.x + searchDist.x; x++) {
					for(int s = startAt.scale - searchDist.scale; s <= startAt.scale + searchDist.scale; s++) { 
						int ox = x - (startAt.x - searchDist.x);
						int os = s - (startAt.scale - searchDist.scale);
						Tile t = scaledTiles.getTileByScale(s);	
						FindResult fr = testTile(pic, x, best.y, t.scale,/*r == null ? -1 : r.score*/ - 1, false);
						f.write(String.format("%d %d %d\n", ox, os, fr == null ? 0 : fr.score));
					}
					f.write("\n");
				}
				f.close();

				f = new BufferedWriter(new FileWriter(String.format(writeFile, frame, "ys")));
				for(int y = startAt.y - searchDist.y; y <= startAt.y + searchDist.y; y++) {
					for(int s = startAt.scale - searchDist.scale; s <= startAt.scale + searchDist.scale; s++) { 
						int oy = y - (startAt.y - searchDist.y);
						int os = s - (startAt.scale - searchDist.scale);
						Tile t = scaledTiles.getTileByScale(s);	
						FindResult fr = testTile(pic, best.x, y, t.scale,/*r == null ? -1 : r.score*/ - 1, false);
						f.write(String.format("%d %d %d\n", oy, os, fr == null ? 0 : fr.score));
					}
					f.write("\n");
				}
				f.close();
				
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		if (best != null) { 
			int c = best.compares;
			startAt.copy(best);
			startAt.compares = c;
		}	
		return best;
	}
	
	@Override
	FindResult find(FindResult startAt, byte []p) { 
		frame++;
		
		FindResult saf = startAt.copy();
		saf.scale += (searchDist.scale + Math.max(searchDist.x, searchDist.y) * 2) * 2;
		Rectangle sa = targetRect(saf);
		byte [] pic =  convertToBlurredCannyGreyscale(p, sa);

		startAt.x -= sa.x;
		startAt.y -= sa.y;
		int oldw = width;
		int oldh = height;
		width = sa.width;
		height = sa.height;
		FindResult rval = findBruteForce(startAt, pic); //Optimized(startAt, pic);
		
		rval = startAt;
		startAt.x += sa.x;
		startAt.y += sa.y;
		width = oldw;
		height = oldh;

		Rectangle found = targetRect(rval);
		Tile t = scaledTiles.getTileByScale(rval.scale);
		debugDisplay2.g2.setColor(Color.blue);
		debugDisplay2.g2.fill(new Rectangle(0, 0, width - 1, height -1));
		debugDisplay.g2.setColor(Color.blue);
		debugDisplay.g2.fill(new Rectangle(0, 0, width - 1, height -1));
		debugDisplay.image.getWritableTile(0, 0).setDataElements(sa.x, sa.y, sa.width, sa.height, pic);
		debugDisplay2.image.getWritableTile(0, 0).setDataElements(found.x, found.y, t.loc.width, t.loc.height, t.data);
		debugDisplay.redraw();
		debugDisplay2.redraw();
		
		return rval;
	}

	boolean jit = false;
	String outDataFile = null;

}