import java.awt.Point;
import java.awt.Rectangle;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;



class HoughTransform {
	// TODO - handle angMin-angMax range that crosses 360 degrees. 
	
	Point origin = new Point(0, 0);
	public double angMin, angMax;
	public double radMin, radMax;
	int angSz, radSz;
	
	int maxhough = 0;
	int [] hough;
	int sinLookup[];
	int cosLookup[]; 

	
	void drawOnPic(byte [] orig, int w, int h, int bpp, double thresh) { 
		int maxpixel = 1;
		int [] chart = new int[w * h];
		for(int y = 0; y < h; y++) {
			for(int x = 0; x < w; x++) { 
				int pixel = score(x, y, thresh);
				chart[x + y * w] = pixel;
				if (pixel > maxpixel) 
					maxpixel = pixel;
			}
		}
		for(int y = 0; y < h; y++) {
			for(int x = 0; x < w; x++) { 
				int s = chart[x + y * w];
				if (s > 0) {
					for (int b = 0; b < bpp; b++) { 
						orig[(x + y * w) * bpp + b] = (byte)(s * 255 / maxpixel);
					}
				}
			}
		}
	}
	
	HoughTransform(int a, int r) { 
		angSz = a; 
		radSz = r; 
		clear();
		sinLookup = new int[angSz];
		cosLookup = new int[angSz];
	}
	
	final int lookupPrecision = 1000000;
	void setAngleRange(double min, double max) {
		angMin = min;
		angMax = max;
		for (int a = 0; a < angSz; a++) { 
			double ang = angMin + (angMax - angMin) / angSz * a;
			if (ang > 360) 
				ang %= 360;
			sinLookup[a] = (int)(Math.sin(Math.toRadians(ang)) * lookupPrecision);
			cosLookup[a] = (int)(Math.cos(Math.toRadians(ang)) * lookupPrecision);
		}
	}
	
	void dump(String fn) { 
		BufferedWriter f;
		try {
			f = new BufferedWriter(new FileWriter(fn));
			for (int a = 0; a < angSz; a++) { 
				for(int r = 0; r < radSz; r++) 
					f.write(String.format("%d %d %d\n", a, r, hough[a + r * angSz]));
				f.write("\n");
			}
			f.close();
		} catch (IOException e) {
			// TODO Auto-gegausSumnerated catch block
			e.printStackTrace();
		}
	}
	void clear() { 
		hough = new int[angSz * radSz];
		maxhough = 0;
	}
	
	private double maxRadius(int x, int y) { 
		double r1 = (x - origin.x) * Math.cos(Math.toRadians(angMin)) 
				+ (y - origin.y) * Math.sin(Math.toRadians(angMin));
		double r2 = (x - origin.x) * Math.cos(Math.toRadians(angMax)) 
				+ (y - origin.y) * Math.sin(Math.toRadians(angMax));
		return r1 > r2 ? r1 : r2;
	}
	
	// return the max radius encountered along the section of the
	// line contained in the rectangle.  Assumes origin and angMin-angMax
	// range has been setup.   Useful in calculating radMin-radMax range
	double maxLineRadius(Rectangle r, double m, int b) { 
		double d, dist = -1;
		
		int x = 0; 
		int y = (int)(x * m + b);
		if (y >= 0 && y < r.height) 
			dist = maxRadius(x, y);
		
		x = r.width; 
		y = (int)(x * m + b);
		d = maxRadius(x, y);
		if (y >= 0 && y <= r.height && d > dist) 
			dist = d;
		
		y = 0; 
		x = (int)((y - b) / m);
		d = maxRadius(x, y);
		if (x >= 0 && x <= r.width && d > dist) 
			dist = d;

		y = r.height; 
		x = (int)((y - b) / m);
		d = maxRadius(x, y);
		if (x >= 0 && x <= r.width && d > dist) 
			dist = d;
		
		return dist;
	}
	


	boolean print = false;
	void projectIntoRect(int []s, Rectangle rec) {
		ArrayList<Point> pts = new ArrayList<Point>();
		this.suppressNonmax(angSz / 20, 0.4f, pts);
		if (print)
			System.out.printf("o(%d,%d)\n", origin.x, origin.y);
		for(Point p : pts) { 
			int a = p.x, r = p.y;
			double ang = angMin + (angMax - angMin) / angSz * a;
				if (ang > 360) 
					ang %= 360;
				double rad = radMin + (radMax - radMin) / radSz * r;
				double ang2 = (ang + 90);
				int weight = hough[a + r * angSz];

				if (ang2 % 90 < 5 || ang2 % 90 > 85)
					continue;
				double x1 = origin.x + Math.cos(Math.toRadians(ang)) * rad;
				double y1 = origin.y + Math.sin(Math.toRadians(ang)) * rad;

	
				for(int y = 0; y < rec.height; y++) {
					// calculate point where this line intercepts row #y
					int x = (int)Math.round(x1 - (y1 - rec.y - y) / Math.tan(Math.toRadians(ang2)));
					if (x >= rec.x && x < rec.x + rec.width) 
						s[x - rec.x + y * rec.width] += weight;
				}
				for(int x = 0; x < rec.width; x++) {
					// calculate point where this line intercepts col #x
					int y = (int)Math.round(y1 - (x1 - rec.x - x) * Math.tan(Math.toRadians(ang2)));
					if (y >= rec.y && y < rec.y + rec.height) 
						s[x  + (y - rec.y) * rec.width] += weight;
					if (x == 0 && print) 
						System.out.printf("\t%d,%d %.1f,%.1f p2(%.1f,%.1f) y(0,%d) w%d\n", 
								a, r, ang2, rad, x1, y1, y-rec.y, weight );

				}
		}		
//		System.out.printf("\n");
	}
	
	
	void add(int x, int y) { 
		for (int a = 0; a < angSz; a++) { 
			double ang = angMin + (angMax - angMin) / angSz * a;
			if (ang > 360)
				ang %= 360;
			double radStep = (radMax - radMin) / radSz;
			int r = (int)(((x - origin.x) * cosLookup[a] / lookupPrecision + (y - origin.y) * sinLookup[a] / lookupPrecision - radMin) / radStep);
			if (r >= 0 && r < radSz) {
				hough[a + r * angSz]++;
				if (hough[a + r * angSz] > maxhough)
					maxhough = hough[a + r * angSz];
			}
		}
		
	}

	int bestAng, bestRad;
	
	void blur(double gr) { 
		GaussianKernel gk = new GaussianKernel(gr, (int)(gr * 8), angSz, radSz);
		gk.blur(hough);
		bestAng = gk.bestX;
		bestRad = gk.bestY;
		maxhough = gk.max;
	}
	
	
	// moves bestAng and bestRad to the closest point to (x,y) that still has over 
	// thresh portion of maxhough;
	void findClosest(int x, int y, float thresh) {
		double bestDist = -1;
		for(int a = 0; a < angSz; a++) {
			for (int r = 0; r < radSz; r++) { 
				int v = hough[a + r * angSz];
				if (v >= maxhough * thresh) {
					double d = Math.sqrt((x - a) * (x - a) + (y - r) * (y  - r));;
					if (bestDist < 0 || d < bestDist) { 
						bestAng = a;
						bestRad = r;
						bestDist = d;
					}
				}
				
			}
		}
	}
	boolean isOnBestLine(int x, int y) { 
		double radStep = (radMax - radMin) / radSz;
		int r = (int)(((x - origin.x) * cosLookup[bestAng] / lookupPrecision + (y - origin.y) * sinLookup[bestAng] / lookupPrecision - radMin) / radStep);
		return r == bestRad;

	}
	
	double bestAngle() {
		return angMin + (angMax - angMin) / angSz * bestAng;
	}
	int bestRadius() { 
		return (int)Math.round(radMin + (radMax - radMin) / radSz * bestRad);
	}
	
	int score(int x, int y, double thresh) {
		int minW = (int)Math.round(maxhough * thresh);
		int pixel = 0;
		for (int a = 0; a < angSz; a++) { 
			double ang = angMin + (angMax - angMin) / angSz * a;
			if (ang > 360) 
				ang %= 360;
			double radStep = (radMax - radMin) / radSz;
			int r = (int)(((x - origin.x) * cosLookup[a] / lookupPrecision + (y - origin.y) * sinLookup[a] / lookupPrecision - radMin) / radStep);
			if (r >= 0 && r < radSz) {
				int w = hough[a + r * angSz];
				if (w > minW) 
					pixel += w;
			}
		}
		return pixel;
	}
	ArrayList<Point> x;
	
	void suppressNonmax(int dist, float thresh, ArrayList<Point> pts) { 
		NonmaxSuppression ns = new NonmaxSuppression(angSz, radSz);
		ns.suppressNonmax(hough, dist, thresh, pts);
		maxhough = ns.max;
		bestAng = ns.bestX;
		bestRad = ns.bestY; 
	}
	
	int bestYIntercept() {
		// TODO fragile - what if angle is 180 degrees off? 
		double lx = origin.x + bestRadius() * Math.cos(Math.toRadians(bestAngle()));
		double ly = origin.y + bestRadius() * Math.sin(Math.toRadians(bestAngle()));
		double i = ly - lx * Math.tan(Math.toRadians(bestAngle() - 90));
		return (int)Math.round(i);
	}
	
	
}