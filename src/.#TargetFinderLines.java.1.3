import java.awt.Point;
import java.awt.Rectangle;
import java.nio.ByteBuffer;

class TargetFinderLines extends TargetFinder { 
	boolean leftSide = false;
	float startAngle = 90 + 50;
	float lastAngle = 0;
	int lastIntercept = 0;
	TargetFinderLines(int w, int h) {
		super(w, h);
		// TODO Auto-generated constructor stub
	}

	@Override 
	Rectangle find(ByteBuffer bb, Rectangle rec) {
		rec.width = 320 / 2;
		rec.height = (int)(240 * .65);
		rec.y = 240 - rec.height;
		c.zones.height = rec.height;
		c.zones.clear();

		
		super.find(bb, rec); // sets canny

		HoughTransform h = new HoughTransform(40, 40);
	
		startAngle = leftSide ? 90 + 50 : 90 - 50;
		float ang = lastAngle > 0 ? lastAngle : startAngle;
		int intercept = 0;
		if (leftSide) { 
			rec.x = 0;
			c.zones.lsz.m1 = c.zones.lsz.m2 = Math.tan(Math.toRadians(ang));
			intercept = (int)-(rec.width * c.zones.lsz.m1);
		
		} else { 
			rec.x = rec.width;
			c.zones.lsz.m1 = c.zones.lsz.m2 = Math.tan(Math.toRadians(ang));
			intercept = 0;
		}
		
		if (lastAngle > 0)
			intercept = lastIntercept;

		
		//Math.toDegrees(Math.atan(c.zones.lsz.m1));

		ang = (float)Math.toDegrees(Math.atan(c.zones.lsz.m1)) + 90;
		if (ang <= 0) ang = 360 - ang;
		if (ang >= 180) ang %= 180;
		
		h.angMax = ang + 10;
		h.angMin = ang - 10;
		
		c.zones.lsz.b1 = (int)Math.round(intercept - 40); // TODO - proper trig here * Math.sin(Math.toRadians(ang)));
		c.zones.lsz.b2 = (int)Math.round(intercept + 40); // * Math.sin(Math.toRadians(ang)));
		
		// TODO - pick these programatically based on the scan zone
		h.origin = new Point(rec.width / 2, (int)(c.zones.lsz.m1 * (rec.width / 2) + c.zones.lsz.b1));
		h.radMax = 90;
		h.radMin = 70;
		
		
		// TODO - figure out correct radMax/radMin based on the actual search area
		//h.radMax = (int)Math.ceil(Math.sqrt(sa.height * sa.height + sa.width * sa.width)) / 3;
		h.radMin = 0;
		
		c.zones.midX = rec.width;
		
		
	
		
		for(int y = 0; y < sa.height; y++) { 
			for(int x = 0; x < sa.width; x++) { 
				if ((canny[x + y * sa.width] & 0xff) == 0xff)  
					h.add(x, y);
			}
		}
		
		h.dump(String.format("/tmp/hough-raw.%04d.dat", count));
		h.blur();
		h.dump(String.format("/tmp/hough-blur.%04d.dat", count));
		//h.suppressNonmax(10, 0.5f);
		//h.dump(String.format("/tmp/hough-suppress.%04d.dat", count));

		count++;
		/*
		int maxpixel = 0;
		int [] chart = new int[sa.width * sa.height];
		for(int y = 0; y < sa.height; y++) {
			for(int x = 0; x < sa.width; x++) { 
				int pixel = h.score(x, y, 0.70f);
				chart[x + y * sa.width] = pixel;
				if (pixel > maxpixel) 
					maxpixel = pixel;
			}
		}
		maxpixel++;
		*/
		for(int y = 0; y < sa.height; y++) { 
			for(int x = 0; x < sa.width; x++) { 
				int i = x + y * sa.width;
				if (h.isOnBestLine(x, y)) {
					orig[i * 3] = orig[i * 3 + 1] = orig[i * 3 + 2] = (byte)255;
					orig[i * 3 + 2] = 0;
				} else 	{
					for(int b = 0; b < 2; b++)  
						orig[i * 3 + b] = 0;
				}
			}
		}
		
		drawCannyLines(orig);
		copyout(orig, c.zones, bb, rec);
		System.out.printf("Best angle %.1f\tbest radius %d\tbest intercept %d\n", h.bestAngle(), h.bestRadius(), h.bestYIntercept());

		lastAngle = h.bestAngle() + 90;
		if (lastAngle < 0) lastAngle = 360 - lastAngle;
		if (lastAngle >= 180) lastAngle %= 180;

		lastIntercept = h.bestYIntercept();
		return null;
	}
	int count = 0;
}