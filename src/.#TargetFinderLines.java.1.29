import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Rectangle;
import java.nio.ByteBuffer;
import java.util.ArrayList;

import math.RunningAverage;
import math.RunningLeastSquares;


class PeriodicityDetector { 
	int timeout;
	PeriodicityDetector(double hystPct, int maxAvg, int t) { 
		timeout = t;
		this.hystPct = hystPct; this.maxAvg = maxAvg;
		hist = new RunningAverage(t);
		av = new RunningAverage(15);
	}
	double hystPct;
	int maxAvg;
	RunningAverage av;
	RunningAverage hist;
	boolean low = true;
	int lastLowTime, lastPeriod;
	void add(int t, int v) {
		hist.add(v);
		double avg = hist.calculate();
		int hyst = (int)(avg * hystPct);
		int lowThresh = (int)(avg - hyst);
		int highThresh = (int)(avg + hyst);
			
		if (low && v > highThresh) 
			low = false;
		else if (!low && v < lowThresh) {
			low = true;
			lastPeriod = t - lastLowTime;
			av.add(lastPeriod);
			lastLowTime = t;
		}
		if (lastLowTime - t > timeout) { 
			lastPeriod = 0;
			av.clear();
		}
	}
	int getPeriod() { 
		if (hist.calculate() > maxAvg) 
			return 0;
		return (int)av.calculate();
	}
	public void clear() {
		lastPeriod = 0;
		av.clear();
		hist.clear();
	}
	
}
class Focus { 
	static final int minWeight = 6;
	// needs focus width of about 75 and average period of 4 to follow manic swerves
	double minAngWidth = 16, maxAngWidth = 35;
	int minSzWidth = 65, maxSzWidth = 120;
	double defaultAngle = 0;
	int defaultIntercept = 0;
	double radZoneOffset = 0.50; // verticle center of the scan strip
	double angZoneOffset = 0.50;
	
	public RunningLeastSquares angle = new RunningLeastSquares(5);
	public RunningLeastSquares intercept = new RunningLeastSquares(5);
	double lastAngle, lastIntercept;
	void update(int weight, double a, int i) {
		if (weight > 5) { 
			angle.add(count, a, weight);
			lastAngle = a;
			intercept.add(count, i, weight);
			lastIntercept = i;
			count++;
		} else { 
			clear();
		}  
		if (angle.count == angle.size && angle.totalWeight() < minWeight * angle.size) { 
			clear();
		} 
		
	}
	
	public int getQuality() {
		return (int)angle.totalWeight();
	}
	boolean full() { 
		return angle.count == angle.size;
	}
	int count() { 
		return angle.count;
	}
	void clear() { 
		angle.clear();
		intercept.clear();
		count = 0;
	}
	double getAngWidth() { 
		return maxAngWidth - (maxAngWidth - minAngWidth) / angle.size * angle.count;
	}
	int getSzWidth() {
		return maxSzWidth - (maxSzWidth - minSzWidth) * angle.count / angle.size;
	}
	double getAngle() {
		return angle.count > 0 ? angle.averageY() : defaultAngle;
	}
	double getLastAngle() { 
		return angle.count > 0 ? lastAngle : defaultAngle;		
	}
	int getLastIntercept() { 
		return (int)Math.round(intercept.count > 0 ? lastIntercept : defaultIntercept);
	}
	int getIntercept() {
		return (int)Math.round(intercept.count > 0 ? intercept.averageY() : defaultIntercept);
	}
	
	int count = 0;
}

class TargetFinderLinePair { 
	TargetFinderLines left, right; 
}


class TargetFinderLines extends TargetFinder { 
	boolean leftSide = false;
	final double toeIn = 0; // TODO -broken? 
	int rawPeakHough = 0;
	
	HslHistogram hhist = null;
	int minLineIntensity = 0;
	int houghAngSz, houghRadSz; 
	final double laneWidthAngle = 16f * 2 / 100 * 15;
	final double laneWidthRad = 45f * 2 / 100 * 10;
	
	GnuplotWrapper gp = new GnuplotWrapper();
	GnuplotWrapper gp2 = new GnuplotWrapper();
	PeriodicityDetector pd = new PeriodicityDetector(0.15, 200, 40);
	ArrayList<ArrayList<Point>> ptHist = new ArrayList<ArrayList<Point>>();
	final int histDelay = 20; //TODO -hardcoded array limits
	boolean useLaneWidthFilter = false;
	
	TargetFinderLines(int w, int h, boolean left, int defAngle, int houghSz) {
		super(w, h);
		houghAngSz = houghSz;
		houghRadSz = houghSz;
		leftSide = left;
		param.name = "TFLines," + (left ? "left" : "right");
		param.gaussianKernelRadius = 1.0f; // TODO- bug in canny stuff, artifacts show up above 1.0
		param.threshold1 = 5;
		param.threshold2 = 5;
		
		sa = new Rectangle(0,0,0,0);
		sa.width = w / 2;
		sa.height = (int)(h * .68);
		sa.y = 40;
		if (leftSide) { 
			sa.x = 0;
			// inner lines
			//focus.defaultIntercept = rec.height;		

			// outer lines
			focus.defaultIntercept = (int)(Math.tan(Math.toRadians(90 - defAngle)) * sa.width) - 10;
			//focus.defaultIntercept = 200;
			focus.defaultAngle = 90 + defAngle;
		} else { 
			sa.x = sa.width;
			focus.defaultIntercept = -10;
			focus.defaultAngle = 90 - defAngle;
		}
		this.h = new HoughTransform(houghAngSz, houghRadSz);
		vanLimits = new Rectangle(w / 3, (int)(h * 5 / 24), 80, 40);
	}
	
	Rectangle vanLimits = null;
	Focus focus = new Focus();
	HoughTransform h = null;
	ArrayList<Point> points = new ArrayList<Point>();
	
	void reset() {
		focus.clear();
		pd.clear();
		count = 0;
		this.ptHist.clear();
	}
	@Override 
	Rectangle []findAll(OriginalImage oi, Rectangle recNO) {
		c.zones.height = sa.height;
		c.zones.clear();

		setCanny(param);

		int intercept = 0;
		double ang = 0;
						
		ang = focus.getAngle();
		intercept = focus.getIntercept();
		
		// Hough angles and angle range are perpendiclar to target line
		double angOffset = leftSide ? focus.angZoneOffset : (1 - focus.angZoneOffset);
		double angMax = ((ang + 90) % 180) + focus.getAngWidth() * angOffset;
		double angMin = ((ang + 90) % 180) - focus.getAngWidth() * (1 - angOffset);
		h.setAngleRange(angMin, angMax);
		
		int szWidth = focus.getSzWidth();
		{
			double toe = -toeIn;
			if (ang < 90) {
				// TODO - this toe-in code doesn't behave properly on the right side.  Plus may mess up
				// the usage of szWidth below to calcualte the Hough origin and radius range. 
				toe = -toe;
				double llength = sa.width / Math.cos(ang);
				szWidth = (int)Math.round(szWidth - llength * Math.sin(Math.toRadians(toeIn * 2)));
			}
			// Trig to calculate constant width of angled scan area
			// TODO - this seems broken for left side: width seems to vary (ang ~ 140) 
			double sr = Math.abs(Math.sin(Math.toRadians(90 - ang)));
			int szW = (int)Math.round(sr != 0 ? szWidth / sr : szWidth);
			c.zones.lsz.b1 = (int)(intercept - szW * focus.radZoneOffset); 
			c.zones.lsz.b2 = (int)(intercept + szW * (1 - focus.radZoneOffset));
			c.zones.lsz.m1 = Math.tan(Math.toRadians(ang - toe)); 
			c.zones.lsz.m2 = Math.tan(Math.toRadians(ang + toe));
			c.zones.midX = sa.width;
		}
	
		szWidth = focus.getSzWidth();

		// Pick origin for hough transform- the intercept of the scanzone with lower edge or 
		// far side edge of sa rectangle. 
		h.origin = new Point();
		h.origin.y = sa.height;
		h.origin.x = (int)Math.round((h.origin.y - (c.zones.lsz.b1 + c.zones.lsz.b2) / 2 ) / ((c.zones.lsz.m1 + c.zones.lsz.m2) / 2));		
		if (h.origin.x < 0 || h.origin.x >= sa.width) { 
			h.origin.x = leftSide ? 0 : sa.width;
			h.origin.y = (int)(h.origin.x * (c.zones.lsz.m1 + c.zones.lsz.m2) / 2 + (c.zones.lsz.b1 + c.zones.lsz.b2) / 2);
		}

		h.radMin = -szWidth * 1;
		h.radMax = szWidth * 1;
		// h.radMax = (float)Math.max(h.maxLineRadius(rec, c.zones.lsz.m1, c.zones.lsz.b1),
		// h.maxLineRadius(rec, c.zones.lsz.m2, c.zones.lsz.b2));
		
		// scan zones are now set up, proceed with canny and hough processing 
		c.processData(oi, sa);
		c.process3();	
        canny = c.getData();
		
        points.clear();
        h.clear();
        
        if (false && !this.useLaneWidthFilter) { 
	        // retain only inner-most canny pixel for each pixel row
			for (int y = 0; y < sa.height; y++) { 
				int startX = leftSide ? sa.width - 1 : 0;
				int endX = leftSide ? -1 : sa.width;
				int step = leftSide ? -1 : 1;
				boolean first = true;
				int continuous = 0;
				final int reqContinuousPixels = 1;
				for(int x = startX; x != endX; x  += step) { 
					if ((canny[x + y * sa.width] & 0xff) == 0xff) {
						if (checkLuminance(oi, sa, x, y, minLineIntensity)) {
							if (++continuous == reqContinuousPixels && first) { 
								h.add(x, y);
								points.add(new Point(x - step * continuous,y));
								first = false;
							}
						} else {
							continuous = 0;
						}
					}
				}
			}
        } else { 	        
	        for( Point p : c.results.l ) {
	        		h.add(p.x, p.y);
	        		points.add(p);
	        }
        }
		
        rawPeakHough = h.maxhough;
		
		// For a broken lane line, try to add in a couple older frames' data
		// to make the line more continuous 
		pd.add(count, h.maxhough);
		int period = pd.getPeriod();
		ptHist.add((ArrayList<Point>)points.clone());
		if (ptHist.size() == histDelay) { 
			if (period >= 4 && period < histDelay /*TODO - bounds/array checking*/) {
				// Add points from about 1/3 of the way through the intermittent line
				// period
				for(Point p : ptHist.get(histDelay - period / 3 - 1)) { 
					h.add(p.x, p.y);
					points.add(p);
					//oi.putPixel(p.x + sa.x, p.y + sa.y, -1);
				}
				for(Point p : ptHist.get(histDelay - period / 2 - 1)) { 
					h.add(p.x, p.y);
					points.add(p);
					//oi.putPixel(p.x + sa.x, p.y + sa.y, -1);
				}
			}

			// And also, for all lines add in points from the most recent frame, to help with
			// dot smearing and to weight the average towards more current values
			for(Point p : ptHist.get(histDelay - 1))  
				h.add(p.x, p.y);
			for(Point p : ptHist.get(histDelay - 2))  
				h.add(p.x, p.y);
			
			ptHist.remove(0);
		}

		h.blurRadius = 0.3f;
		h.blur();   // TODO - investigate why larger gaussian radius causes jitter

		if (useLaneWidthFilter) { 
			if (leftSide && Silly.debug(Silly.DEBUG_LINES)) { 
				//if (Silly.debug(Silly.DEBUG_LINES)) { 
				gp2.startNew();
				gp2.add3DGrid(h.hough, h.angSz, h.radSz);
				gp2.draw();
			}
			h.applyCorrelation(2.2, 2.6, Math.sqrt(sa.width * sa.width + sa.height * sa.height), leftSide);
		}	else {
			int a = leftSide ? h.angSz / 3 : h.angSz * 2 / 3;
			h.findClosest(a, h.radSz, 0.8f);
		}
		
		if (leftSide && Silly.debug(Silly.DEBUG_LINES)) { 
			//if (Silly.debug(Silly.DEBUG_LINES)) { 
			gp.startNew();
			gp.add3DGrid(h.hough, h.angSz, h.radSz);
			gp.draw();
		}

		count++;
					
		focus.update(h.maxhough, (h.bestAngle() + 90) % 180, h.bestYIntercept());
		double a = focus.getAngle();
	
		// Min angle from the horizon.  Delicate/critical, prevents locking on 
		// horizon or other very slight road verge, pushes tracker down to more
		// appropriate outer lane line or road edge
		int minAng = 12;
		if (focus.full() && (leftSide && (a < 90 + minAng || a > 180 - minAng)) || 
				(!leftSide && (a < 0 + minAng || a > 90 - minAng))) { 
			//System.out.print("Clearing due to angle\n");
			reset();
		}

		// Does line intercept vanLimits retangle? - todo clean this up move to its own function 
		if (focus.full()) { 
			double m1 = Math.tan(Math.toRadians(focus.getAngle()));
			double b1 = sa.y + focus.getIntercept() - sa.x * m1;
			int x = (int)((vanLimits.y - b1) / m1);
			if (x < vanLimits.x || x > vanLimits.x + vanLimits.width) {
				x = (int)((vanLimits.y + vanLimits.height - b1) / m1);
				if (x < vanLimits.x || x > vanLimits.x + vanLimits.width) {
					int y = (int)((vanLimits.x * m1 + b1));
					if (y < vanLimits.y || y > vanLimits.y + vanLimits.height) { 
						y = (int)(((vanLimits.x + vanLimits.width) * m1 + b1));						
						if (y < vanLimits.y || y > vanLimits.y + vanLimits.height) { 		
							reset();;
							//System.out.print("Clearing due to vanish rect\n");
						}
					}
				}
			}
		}


		// redo hough with all points (not just innermost color-segmented points
		// for the vanish point detection code. 
		//h.clear();
		//for( Point p : c.results.l ) 
        //	h.add(p.x, p.y);
        //r	h.blur(0.5f);   // TODO - investigate why larger gaussian radius causes jitter
		
	

		return null;
	}
	
	int count = 0;
	
	public double getAngle() {		
    	return focus.angle.predict(focus.count);
	}
	
	private boolean checkLuminance(OriginalImage oi, Rectangle sa, int x, int y, int thresh) {
		for(int dx = -1; dx <= 1; dx++) { 
			for(int dy = -1; dy <= 1; dy++) { 			
				if (x + dx >= 0 && x + dx < sa.width && dy + y >= 0 && dy + y < sa.height) {  
					if ((int)oi.getPixelLum(x + dx + sa.x, y + dy + sa.y) >= thresh)
						return true;
				}
			}
		}
		return false;
				
	}
	
	public int getOffset() {
    	double m = Math.tan(Math.toRadians(getAngle()));
		double b = (int)Math.round(sa.y + focus.intercept.predict(focus.count)) - sa.x * m;
		//double b = (int)Math.round(sa.y + focus.getLastIntercept() - sa.x * m;
		// x = (y - b) / m
		return (int)Math.round((sa.y + sa.height - b) / m);
	}
	
	// display line, if it interstects the side of the vanLimits rect
	public void display(Graphics2D g2, Rectangle r, int x1) {
 		if (focus.getQuality() > Focus.minWeight) {
        	double m = Math.tan(Math.toRadians(focus.getLastAngle()));
			double b = (int)Math.round(sa.y + focus.getLastIntercept()) - sa.x * m;
			int recEdgeX = leftSide ? r.x : r.x + r.width;
			int rx = 0;
			boolean valid = false;
			
			int ry = (int)(m * recEdgeX + b);
			if (ry >= r.y && ry <= r.y + r.height) { 
				rx = recEdgeX;
				valid = true;
			} else {
				ry = r.y + r.height;
				rx = (int)((ry - b) / m);
				if (rx > r.x && rx <= r.x + r.width)
					valid = true;
			}
			
			if (valid) { 
				int y1 = (int)Math.round(m * x1 + b);
				g2.drawLine(x1, y1, rx, ry);
			}
			//System.out.printf("ang %.2f\n", tfl.focus.angle.calculate());
		}
		
	}
	
	static Point linePairIntercept(TargetFinderLines l1, TargetFinderLines l2) { 
		double m1 = Math.tan(Math.toRadians(l1.focus.getLastAngle()));
		double b1 = l1.sa.y + l1.focus.getLastIntercept() - l1.sa.x * m1;
		double m2 = Math.tan(Math.toRadians(l2.focus.getLastAngle()));
		double b2 = l2.sa.y + l2.focus.getLastIntercept() - l2.sa.x * m2;

		int x = (int)Math.round((b2 - b1) / (m1 - m2));
		int y = (int)Math.round(x * m2 + b2);
		return new Point(x, y);
	}
	
	static void displayLinePair(TargetFinderLines l1, TargetFinderLines l2, Graphics2D g2) {
		Point p = linePairIntercept(l1, l2);
		int rad = 5;
		Rectangle r = l1.vanLimits;
		if (l1.focus.getQuality() > Focus.minWeight && l2.focus.getQuality() > Focus.minWeight) {
			r = new Rectangle(p.x - rad, p.y - rad, rad * 2 + 1, rad * 2 + 1);
			g2.draw(r);
		}
		l1.display(g2, r, 0);
		l2.display(g2, r, l2.width);
		//System.out.printf("l weight %d\n", l1.focus.angle.weight);
	}

	static void displayLinePairToOutsideVanRec(TargetFinderLines l1, TargetFinderLines l2, Graphics2D g2) {
		l1.display(g2, l1.vanLimits, 0);
		l2.display(g2, l1.vanLimits, l1.width);
	}
	
	public void markup(OriginalImage coi) {
        // retain only inner-most canny pixel for each pixel row
		for (int y = 0; y < sa.height; y++) { 
			int startX = leftSide ? sa.width - 1 : 0;
			int endX = leftSide ? -1 : sa.width;
			int step = leftSide ? -1 : 1;
			for(int x = startX; x != endX; x  += step) { 
				if (y >= c.zones.ystart(x) && y < c.zones.yend(x))
					coi.dimPixel(x + sa.x, y + sa.y);
				
			}
		}
		// Draw canny lines on original image
		for( Point p : c.results.l )  
			coi.putPixel(p.x + sa.x, p.y + sa.y, -1);		
	}

}
