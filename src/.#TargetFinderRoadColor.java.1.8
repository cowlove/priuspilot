import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.nio.ByteBuffer;
public class TargetFinderRoadColor extends TargetFinder {
	TargetFinderRoadColor(int w, int h) {
		super(w, h);
		param.threshold1  = 6;
		param.threshold2  = 2;
		param.gaussianKernelRadius = 0.5f;
		param.H = new ByteSpan(145, 220);   
		param.S = new ByteSpan(70, 256);
		param.L = new ByteSpan(70, 230);
	}
	
	void draw(Graphics2D g2) { 
		g2.draw(sa);
	}
	HslHistogram hh = new HslHistogram();
	
	@Override 
	Rectangle []findAll(OriginalImage oi, Rectangle rec) {
		sa = rec;
		int []hsl = new int[3];
		hh.clear();
		for(int x = 0; x < sa.width; x++) { 
			for(int y = 0; y < sa.height; y++) {
				/*
				int r = (int)oi.getR(x, y) & 0xff;
				int g = (int)oi.getG(x, y) & 0xff;
				int b = (int)oi.getB(x, y) & 0xff;
				int th = 40;
				if (Math.abs(r - b) > th || Math.abs(r - g) > th || Math.abs(g - b) > th) {
					//orig[idx] = orig[idx + 1] = orig[idx + 2] = 0;
				}
				
				LazyHslConvert.rgb2hsl((byte)r, (byte)g, (byte)b, hsl);
				*/
				int l = oi.getPixelLum(x + sa.x, y + sa.y);
				//oi.clearPixel(x, y);
				hh.add(0, 0, l);
			}
		}
		//hh.draw(0.0);
		roadIntensity = hh.hists[2].maxbucket;  // TODO- this very important parameter needs to be documented
	
                return null;
	}	
	int roadIntensity;
	
}
