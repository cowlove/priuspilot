#include <jni.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdlib.h>

#include <linux/types.h>
#include <linux/videodev2.h>
#include <sys/ioctl.h>
#include <errno.h>
#include <malloc.h>
#include <string.h>


#include "FrameCaptureJNI.h"



/*
 * Class:     FrameCaptureJNI
 * Method:    grabFrame
 * Signature: (Ljava/lang/String;II)[I
 */

// must run with LD_PRELOAD="/usr/lib/libv4l/v4l1compat.so" 

// compile w/ 
// g++ FrameCaptureJNI.c CannyEdgeDetector.cpp -I /usr/lib/jvm/java-6-openjdk/include/ -O3  -o  libframecapturejni.so -lm -shared



// create java headers with javac FrameCaptureJNI.java, javah FrameCaptureJNI




extern "C" int fd;
int captureFd = -1;
int currentCapFileSize = 0;
int currentCapFileCount = 0;

static int count = 0;
int openvid(const char *filename, int w, int h);
extern "C" int *canny(int, int, unsigned char *);
int get_brightness_adj(unsigned char *image, long size, int *brightness);

int windowFactor = 1;  // very fragile code to take a subset of the window
extern "C" void v4l2mmap_open(const char *, int, int);
extern "C" void v4l2mmap_close();
extern "C" int v4l2mmap_poll();
extern "C" int v4l2mmap_wait_frame(unsigned char *);

static int max[3];

inline void rgb2hsl(int r, int g, int b, int hsl[]) {		
		float var_R = ( (float)r / 255 );                    
		float var_G = ( (float)g / 255 );
		float var_B = ( (float)b / 255 );
		
		float var_Min;    //Min. value of RGB
		float var_Max;    //Max. value of RGB
		float del_Max;    //Delta RGB value
						 
		if (var_R > var_G) 
			{ var_Min = var_G; var_Max = var_R; }
		else 
			{ var_Min = var_R; var_Max = var_G; }
	
		if (var_B > var_Max) var_Max = var_B;
		if (var_B < var_Min) var_Min = var_B;
	
		del_Max = var_Max - var_Min; 
								 
		float H = 0, S, L;
		L = ( var_Max + var_Min ) / 2;
	
		if ( del_Max == 0 ) { H = 0; S = 0; } // gray
		else {                                //Chroma
			if ( L < 0.5 ) 
				S = del_Max / ( var_Max + var_Min );
			else           
				S = del_Max / ( 2 - var_Max - var_Min );
	
			float del_R = ( ( ( var_Max - var_R ) / 6 ) + ( del_Max / 2 ) ) / del_Max;
			float del_G = ( ( ( var_Max - var_G ) / 6 ) + ( del_Max / 2 ) ) / del_Max;
			float del_B = ( ( ( var_Max - var_B ) / 6 ) + ( del_Max / 2 ) ) / del_Max;
	
			if ( var_R == var_Max ) 
				H = del_B - del_G;
			else if ( var_G == var_Max ) 
				H = ( 1.0 / 3 ) + del_R - del_B;
			else if ( var_B == var_Max ) 
				H = ( 2.0 / 3 ) + del_G - del_R;
			if ( H < 0 ) H += 1;
			if ( H > 1 ) H -= 1;
		}
		hsl[0] = (int)(360*H);
		hsl[1] = (int)(S*100);
		hsl[2] = (int)(L*100);
		
	//	for(int i = 0; i < 3; i++) 
	//		if (hsl[i] > max[i]) max[i] = hsl[i];
	}


void intRgb2hsl(int r, int g, int b, int hsl[]) {		
		int var_R = r;
		int var_G = g;
		int var_B = b;
		
		int var_Min;    //Min. value of RGB
		int var_Max;    //Max. value of RGB
		int del_Max;    //Delta RGB value
						 
		if (var_R > var_G) 
			{ var_Min = var_G; var_Max = var_R; }
		else 
			{ var_Min = var_R; var_Max = var_G; }
	
		if (var_B > var_Max) var_Max = var_B;
		if (var_B < var_Min) var_Min = var_B;
	
		del_Max = var_Max - var_Min; 
								 
		int H = 0, S, L;
		//printf("%d %d %d\n", del_Max, var_Min, var_Max);
		L = ( var_Max + var_Min ) / 2;
	
		if ( del_Max == 0 ) { H = 0; S = 0; } // gray
		else {                                //Chroma
			if ( L < 128 ) 
				S = del_Max / ( var_Max + var_Min );
			else           
				S = del_Max / ( 255 - var_Max - var_Min );
	
			float del_R = ( ( ( var_Max - var_R ) / 6 ) + ( del_Max / 2 ) ) / del_Max;
			float del_G = ( ( ( var_Max - var_G ) / 6 ) + ( del_Max / 2 ) ) / del_Max;
			float del_B = ( ( ( var_Max - var_B ) / 6 ) + ( del_Max / 2 ) ) / del_Max;
	
			if ( var_R == var_Max ) 
				H = del_B - del_G;
			else if ( var_G == var_Max ) 
				H = ( 255 / 3 ) + del_R - del_B;
			else if ( var_B == var_Max ) 
				H = ( 255 * 2 / 3 ) + del_G - del_R;
			if ( H < 0 ) H += 255;
			if ( H > 255 ) H -= 255;
		}
		hsl[0] = H;
		hsl[1] = S;
		hsl[2] = L;
		
	//	for(int i = 0; i < 3; i++) 
	//		if (hsl[i] > max[i]) max[i] = hsl[i];
	}


void rgb24toHsl24(unsigned char *r24, unsigned char *hsl24, int pixels) { 
  for(int i = 0; i < pixels; i++) {
	  int hsl[3];
	  //intRgb2hsl(r24[i * 3], r24[i * 3 + 1], r24[i * 3 + 2], hsl);
	  rgb2hsl(r24[i * 3], r24[i * 3 + 1], r24[i * 3 + 2], hsl);
	  hsl24[i * 3] = hsl[0] * 255 / 360;  
	  hsl24[i * 3 + 1] = hsl[1] * 255 / 100;
	  hsl24[i * 3 + 2] = hsl[2] * 255 / 100;
   }
   //	printf("%d %d %d\n", max[0], max[1], max[2]);
}

void rgb32toRgb24(const int *r32, unsigned char *r24, int count) { 
   for(int i = 0; i < count; i++) { 
	r24[i * 3] = r32[i] & 0xff;
	r24[i * 3 + 1] = (r32[i] & 0xff00) >> 8;
	r24[i * 3 + 2] = (r32[i] & 0xff0000) >> 16;
    }
}

int live = 0;

static unsigned char *obuf = NULL, *line = NULL;

struct config {
	char filename[256];
	int resWidth;
	int resHeight;
	int windX;
	int windY;
	int windWidth;
	int windHeight;
	int flip;
	bool reopenCaptureFile;
	char captureFile[256];
	int captureFileCount; 
	int captureFileSize; 
	int format; /* 0 = yuyv, 1 = rgb24 */
	int minInterval;  /* minimum ms between frames */
} conf;

JNIEXPORT void JNICALL Java_FrameCaptureJNI_configure
  (JNIEnv *env, jobject o, jstring fname, jint resWidth, jint resHeight, jint windX, jint windY, 
	jint windWidth, jint windHeight, jboolean flip, jstring capfname, jint capsize, 
	jint capcount, jint minInterval) {
		jboolean iscopy;
		const char *fn = (env)->GetStringUTFChars(fname, &iscopy);
		strcpy(conf.filename, fn);
		(env)->ReleaseStringUTFChars(fname, fn);
		
		fn = (env)->GetStringUTFChars(capfname, &iscopy);
		strcpy(conf.captureFile, fn);
		(env)->ReleaseStringUTFChars(capfname, fn);

		conf.resWidth = resWidth;
		conf.resHeight = resHeight;
		conf.windX = windX;
		conf.windY = windY;
		conf.windWidth= windWidth;
		conf.windHeight= windHeight;
		conf.flip = flip;
		conf.captureFileCount = capcount;
		conf.captureFileSize = capsize;
		conf.reopenCaptureFile = false;
		conf.format = 0;
		conf.minInterval = minInterval;
		
		printf("FrameCaptureJNI configured with flip=%d\n", conf.flip);
  }
  
  

JNIEXPORT void JNICALL Java_FrameCaptureJNI_discardFrame
  (JNIEnv *, jobject, jstring)  { 
    int n = read(fd, obuf, conf.resWidth * conf.resHeight * 3);
}

JNIEXPORT void JNICALL Java_FrameCaptureJNI_renameCurrentCaptureFile
  (JNIEnv *, jobject, jstring) {
	  
}


int clamp(int x) { 
	if (x < 0) return 0;
	if (x > 255) return 255; 
	return x;
}

inline void yuv422torgb24_bw(const unsigned char *yuv, unsigned char *rgb) {
	rgb[0] = rgb[1] = rgb[2] = yuv[0];
	rgb[4] = rgb[5] = rgb[6] = yuv[2];
}
	
void yuv422torgb24_0(const unsigned char *yuv, unsigned char *rgb) {
	float y1 = yuv[0];
    float cb = yuv[1];
    float cr = yuv[3];

	rgb[0] = clamp(y1 + (1.402*cb));
	rgb[1] = clamp(y1 - (0.344*cb) - (0.714*cr));
	rgb[2] = clamp(y1 + (1.772*cr));

	y1 = yuv[2];
	rgb[3] = clamp(y1 + (1.402*cb));
	rgb[4] = clamp(y1 - (0.344*cb) - (0.714*cr));
	rgb[5] = clamp(y1 + (1.772*cr));
}

void yuv422torgb24_1(const unsigned char *yuv, unsigned char *rgb) {

	float y = yuv[0];
    float u = yuv[3];
    float v = yuv[1];

    rgb[0] = clamp(y + (1.140f * v));
    rgb[1] = clamp(y - (0.394f * u) - (0.581f * v));
    rgb[2] = clamp(y + (2.028f * u));
  
	y = yuv[2];
    rgb[3] = clamp(y + (1.140f * v));
    rgb[4] = clamp(y - (0.394f * u) - (0.581f * v));
    rgb[5] = clamp(y + (2.028f * u));
}

inline void yuv422torgb24_2(const unsigned char *in, unsigned char *out) {
	// This seems to work best so fr
	int Y1 = in[0];
	int V = in[1];
	int Y2 = in[2];
	int U = in[3];

	int R, G, B, C, D, E;
	
	int Y = conf.flip ? Y2 : Y1;
	
	C = Y - 16;
	D = U - 128;
	E = V - 128;

	R = clamp((298 * C + 409 * E + 128) >> 8);
	G = clamp((298 * C - 100 * D - 208 * E + 128) >> 8);
	B = clamp((298 * C + 516 * D + 128) >> 8);
	
	out[0] = R;
	out[1] = G;
	out[2] = B;
	
	Y = conf.flip ? Y1 : Y2;
	
	C = Y - 16;
	D = U - 128;
	E = V - 128;

	R = clamp((298 * C + 409 * E + 128) >> 8);
	G = clamp((298 * C - 100 * D - 208 * E + 128) >> 8);
	B = clamp((298 * C + 516 * D + 128) >> 8);
	
	out[3] = R;
	out[4] = G;
	out[5] = B;
	
}



void yuv422torgb24_3(const unsigned char *in, unsigned char *out) {
	int Y1 = in[0];
	int Cr = in[1];
	int Y2 = in[2];
	int Cb = in[3];

	int R, G, B, Y;

	Cr = Cr - 128;
	Cb = Cb - 128;
	
	Y = Y1;
	
	R = Y + Cr + (Cr >> 2) + (Cr >> 3) + (Cr >> 5);
	G = Y - (Cb >> 2 + Cb >> 4 + Cb >> 5) - (Cr >> 1 + Cr >> 3 + Cr >> 4 + Cr >> 5);
	B = Y + Cb + Cb >> 1 + Cb >> 2 + Cb >> 6;

	out[0] = clamp(R);
	out[1] = clamp(G);
	out[2] = clamp(B);
	
	Y = Y2;

	R = Y + Cr + Cr >> 2 + Cr >> 3 + Cr >> 5;
	G = Y - (Cb >> 2 + Cb >> 4 + Cb >> 5) - (Cr >> 1 + Cr >> 3 + Cr >> 4 + Cr >> 5);
	B = Y + Cb + Cb >> 1 + Cb >> 2 + Cb >> 6;

	out[3] = clamp(R);
	out[4] = clamp(G);
	out[5] = clamp(B);	
}

jlong frameTimestamp;

extern "C" void process_image(const unsigned char *in, unsigned char *out,
	struct timeval *tv) {
	if (conf.format) { 
		if (conf.flip) { 
			for(int y = 0; y < conf.windHeight; y++)  {
				for (int x = 0; x < conf.windWidth; x += 2) { 
					int i1 = ((y + conf.windY) * conf.resWidth + conf.windX + x) * 2;
					int i2 = ((conf.windY + conf.windHeight - y - 1) * conf.windWidth + 
							(conf.windX + conf.windWidth - x - 1)) * 3;
						yuv422torgb24_2(in + i1, out + i2);
				}
			}
		} else {
			for(int y = 0; y < conf.windHeight; y++)  {
				for (int x = 0; x < conf.windWidth; x += 2) { 
					int i1 = ((y + conf.windY) * conf.resWidth + conf.windX + x) * 2;
					int i2 = ((conf.windY + y) * conf.windWidth + x) * 3;
						yuv422torgb24_2(in + i1, out + i2);
				}
			}
		}
	} else { 
		if (conf.flip) { 
			printf("TODO- flip for yuyv\n");
			exit(-1);
		} else { 
			memcpy(out, in, conf.windHeight * conf.windWidth * 2);
		}
	}
		
	if (captureFd > 0) {
		int r = write(captureFd, &frameTimestamp, 8);
		currentCapFileSize += r;
		r = write(captureFd, in, conf.windHeight * conf.windWidth * 2);
		currentCapFileSize += r;
	}


}

struct v4l2_queryctrl queryExposure, queryBrightness;


long lastms;
JNIEXPORT jint JNICALL Java_FrameCaptureJNI_grabFrame
  (JNIEnv *env, jobject obj, jobject ib, jobject tb, jlong ms) { 
  caddr_t m;
    jboolean iscopy;
	int newbright;
    struct stat finfo;
	int n;
  
	int w = conf.resWidth;
	int h = conf.resHeight;

	frameTimestamp = ms;
    unsigned char *buf = (unsigned char *)(env)->GetDirectBufferAddress(ib);

	if ((conf.captureFileSize != 0 && currentCapFileSize > conf.captureFileSize &&
		captureFd >= 0) || conf.reopenCaptureFile) {
			if (captureFd >= 0) 
				close(captureFd);
			currentCapFileCount++;
			if (conf.captureFileCount > 0) 
				currentCapFileCount %= conf.captureFileCount;
			captureFd = -1;
			conf.reopenCaptureFile = false;
	}
	if (captureFd < 0 && strlen(conf.captureFile)  > 0) {
		char fname[256];
		currentCapFileSize = 0;
		sprintf(fname, conf.captureFile, currentCapFileCount); 
		captureFd = open(fname, O_WRONLY | O_CREAT | O_TRUNC, 0644);
	}
		
    if (fd < 0) {
		v4l2mmap_open(conf.filename, conf.resWidth, conf.resHeight);
		//openvid(conf.filename, conf.resWidth, conf.resHeight);
		if (fd > 0)
			live = 1;
		if (1) { 
			struct v4l2_control ctl;
			struct v4l2_queryctrl query;
		
			memset(&ctl, 0, sizeof(ctl));
			memset(&query, 0, sizeof(query));
			memset(&queryExposure, 0, sizeof(queryExposure));
			memset(&queryBrightness, 0, sizeof(queryBrightness));

			printf("Avalaible V4L2 controls:\n");
			for(query.id = V4L2_CID_BASE; query.id <= V4L2_CID_LASTP1; query.id++) { 
				if (ioctl(fd, VIDIOC_QUERYCTRL, &query) >= 0) { 
					printf("\t%25s\t %d-%d +/-%d, default %d\n", 
						query.name, query.minimum, query.maximum, query.step,
						query.default_value);				
				}
			}
			for(query.id = V4L2_CID_CAMERA_CLASS_BASE; query.id <= V4L2_CID_CAMERA_CLASS_BASE 
			+ 100; query.id++) { 
				if (ioctl(fd, VIDIOC_QUERYCTRL, &query) >= 0) { 
					printf("\t%25s\t %d-%d +/-%d, default %d\n", 
						query.name, query.minimum, query.maximum, query.step,
						query.default_value);				
				}
			}
			queryBrightness.id = V4L2_CID_BRIGHTNESS;
			if (ioctl(fd, VIDIOC_QUERYCTRL, &queryBrightness) < 0) {
				perror("VIDIOC_QUERYCTRL: V4L2_CID_BRIGHTNESS"); 
			}
			queryExposure.id = V4L2_CID_EXPOSURE_ABSOLUTE;
			if (ioctl(fd, VIDIOC_QUERYCTRL, &queryExposure) < 0) { 
				perror("VIDIOC_QUERYCTRL: V4L2_CID_EXPOSURE_ABSOLUTE"); 
			}
		
			memset(&ctl, 0, sizeof(ctl));
			ctl.id = V4L2_CID_EXPOSURE_AUTO;
			ctl.value = 0;
			if (ioctl(fd, VIDIOC_G_CTRL, &ctl) < 0) {
					perror("VIDIOC_G_CTRL");
			}
			printf("CTRL was %d\n", ctl.value);
			ctl.value = V4L2_EXPOSURE_MANUAL;
			if (ioctl(fd, VIDIOC_S_CTRL, &ctl) < 0) {
					perror("VIDIOC_S_CTRL");
			}
		}
	}
	if (fd < 0) {
		printf("opening normal file %s\n", conf.filename);
		if (strcmp(conf.filename, "stdin") == 0) {
				fd = 0; 
		} else
			    fd = open(conf.filename, O_RDONLY);
	}
	//buf = malloc(win.width * win.height * sizeof(int));
    //fprintf(stderr, "Going to read %d to %x\n", win.width * win.height * sizeof(int), buf);

	long long t; 
	if (!live) {
		if (obuf == NULL) 
			obuf = (unsigned char *)malloc(h * w * 2);
		n = read(fd, &frameTimestamp, 8);
		int needed = w * h * 2;
		unsigned char *p = obuf;
		do { 
			n = read(fd, p, needed);
			needed -= n;
			p += n;
		} while(needed > 0 && n > 0);
		process_image(obuf, buf, 0);
	} else {
		if (conf.minInterval > 0) 
			usleep(conf.minInterval * 1000);
		do {
			v4l2mmap_wait_frame(buf);
		} while(v4l2mmap_poll() != 0);
		n = w * h * 2;
	}
	
	


	//rgb32toRgb24((int *)b2, (unsigned char *)buf, win.height * win.width);
	
    if (n <= 0) {
		close(fd);
		fd = -1;
	}

    
    //rgb24toHsl24(buf, obuf, w * h);
    //bcopy(obuf, buf, w * h * 3);
    
    int fms = ms - lastms;
    lastms = ms;
    
    // adjust brightness every 5 sec or so.
    if(n > 0 && (count++ % 5) == -1 && live) { 
		struct v4l2_control ctl;
		struct v4l2_queryctrl query;
		
		
		memset(&ctl, 0, sizeof(ctl));
		memset(&query, 0, sizeof(query));
		ctl.id = query.id = V4L2_CID_EXPOSURE_ABSOLUTE;
		ctl.value = 0;
		
		if (ioctl(fd, VIDIOC_QUERYCTRL, &query) < 0) {
				//perror("V4L2_CID_BRIGHTNESS");
		}
		
		if (ioctl(fd, VIDIOC_G_CTRL, &ctl) < 0) {
				//perror("V4L2_CID_BRIGHTNESS");
		}
		int newbright;
	    get_brightness_adj(buf, conf.windHeight * conf.windWidth * 2, &newbright);

		int oval = ctl.value;
		newbright /= 2;
		if (newbright > 15 || newbright < -15) 
			ctl.value += newbright;
		query.maximum = 1250; // 625
		if (ctl.value < query.minimum)
			ctl.value = query.minimum;
		if (ctl.value > query.maximum)
			ctl.value = query.maximum;

		if ((count % 1) == 0) { 
			fprintf(stderr, "frame ms=%d, new brightness %d/%d, req change=%d\n", 
					fms, (int)ctl.value, oval, newbright);
		}
		if (ctl.value != oval) {
			if(ioctl(fd, VIDIOC_S_CTRL, &ctl) < 0) {
				fprintf(stderr, "newbright %d failed w %d\n", n, errno);
			}
		}
	}
	

    //int *cbuf = canny(w, h, buf); 

    //rgb32toRgb24(cbuf, buf, w * h);

    //fprintf(stderr, "Return %d\n", n);
    return n; 
}


JNIEXPORT jlong JNICALL Java_FrameCaptureJNI_getFrameTimestamp
  (JNIEnv *, jobject) {
	  return frameTimestamp;
} 
	  

#define TARGET_LUMINANCE 85
int get_brightness_adj(unsigned char *image, long size, int *brightness) {
  long i, tot = 0;
  for (i=0; i<size; i += 2)
	  tot += image[i];
  *brightness = (TARGET_LUMINANCE - tot/(size / 2));
  return !((tot/(size)) >= 126 && (tot/(size)) <= 130);
}


static int alreadyComplained = 0;

/*
int openvid(const char *filename, int w, int h) { 
	struct video_window win;
	struct video_capability cap;
	struct video_picture vpic;  
	unsigned char *buffer, *src;
	int r = 0, g = 0, b = 0;
	unsigned int i;
	int n;

	  fd = open(filename, O_RDONLY);

	  if (fd < 0) {
			if (!alreadyComplained)
			perror(filename);
			alreadyComplained = 1;
			return fd;
	  }
	  alreadyComplained = 0;

	  if (ioctl(fd, VIDIOCGCAP, &cap) < 0) {
			perror("VIDIOGCAP");
			fprintf(stderr, "( not a video4linux device?)\n");
			close(fd);
			return fd = -1;
	  }

	  if (ioctl(fd, VIDIOCGWIN, &win) < 0) {
			perror("VIDIOCGWIN");
			close(fd);
			return fd = -1;
	  }

	  win.height = h;
	  win.width = w;
	  if (ioctl(fd, VIDIOCSWIN, &win) < 0) {
			perror("VIDIOCSWIN");
			close(fd);
			return fd = -1;
	  }



	  if (cap.type & VID_TYPE_MONOCHROME) {
			  fprintf(stderr, "Unable to find a supported COLOR format.\n");
			  close(fd);
				  return fd = -1;
	  } 

		if (ioctl(fd, VIDIOCGPICT, &vpic) < 0) {
				perror("VIDIOCGPICT");
				close(fd);
				return fd = -1;
		}

	  //vpic.palette=VIDEO_PALETTE_RGB24;
	  vpic.palette=VIDEO_PALETTE_YUYV;
	  vpic.depth = 16;
	  if(ioctl(fd, VIDIOCSPICT, &vpic) < 0) {
			  fprintf(stderr, "palette %d depth %d didn't work\n", vpic.palette, 				vpic.depth);
			close(fd);
			return fd = -1;
	  }

	  fprintf(stderr, "Video device '%s' opened at %dx%d\n", filename, w, h);  
	  return fd;
}
*/
/*
 * Class:     FrameCaptureJNI
 * Method:    findTemplate
 * Signature: ([I)D
 */
JNIEXPORT jdouble JNICALL Java_FrameCaptureJNI_findTemplate
  (JNIEnv *, jobject, jintArray) {
	  jdouble r = 0;
	  return r;
  }

/*
 * Class:     FrameCaptureJNI
 * Method:    setTemplate
 * Signature: (IIII)V
 */
JNIEXPORT void JNICALL Java_FrameCaptureJNI_setTemplate
  (JNIEnv *, jobject, jint, jint, jint, jint) { 
	  
  }


JNIEXPORT void JNICALL Java_FrameCaptureJNI_setCaptureFile
  (JNIEnv *env, jobject, jstring f) { 
    jboolean iscopy;
	const char *fname = (env)->GetStringUTFChars(f, &iscopy);
	conf.reopenCaptureFile = true;
	strcpy(conf.captureFile, fname);
	(env)->ReleaseStringUTFChars(f, fname);
  }
  
  
JNIEXPORT void JNICALL Java_FrameCaptureJNI_close
  (JNIEnv *, jobject) {
	if (fd > 0) 
		close(fd);
	fd = -1;
}


/*
main() {
	int w = 320; 
	int h = 240; 
	openvid("/dev/video0", w, h);
	char *b2 = (char *)malloc(w * h * 4);
    int n = read(fd, b2, w * h * 4);
    fprintf(stderr, "Got %d\n", n);

}
*/
