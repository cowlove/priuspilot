import math.*;


public class PidControl {
    class PID {
        PID(double ap, double ai, double ad, double add, double al) {
            p = ap;
            i = ai;
            d = ad;
            dd = add;
            l = al;
        }
        public PID clone() {
        	return new PID(p, i, d, dd, l);
        }
        PID() {}
        double p, i, d, dd,  l;
        public String toString(String pref) { 
        	return String.format("%sp=%.2f, %si=%.2f, %sd=%.2f, %sdd=%.2f, %sl=%.2f", 
        			pref, p, pref, i, pref, d, pref, dd, pref, l); 
        }
    }
    public String toString(String pref) { 
    	return String.format("%se=%.2f, %sdef=%.2f, %sq=%.2f, ", pref, corr, 
    			pref, defaultValue.calculate(), pref, quality) + err.toString(pref);
    }
    PID err = new PID(); 
    PID period = new PID(0.1, 5, .8, .3, 3.0);  // TODO - change from explicit frame counts to a time period
    PID gain = new PID(2.5, 0.000, 1.2, 0, 0.0);
    double ierrorLimit = 0.35;
    double finalGain = 1.85;
    double manualTrim = -0.03; 
    int derrDegree = 3;
    int fadeCountMin = 3; 
    int fadeCountMax = 8;
    double qualityFadeGain = 4.0;
    double qualityFadeThreshold = 0.10;
    double quality = 0.0;
    
    // these values are set in reset() method
    int skippedFrames = 0;
    JamaLeastSquaresFit d, dd;
    RunningLeastSquares i; 
	RunningQuadraticLeastSquares p;
	
    RunningAverage defaultValue = new RunningAverage(150);
    long starttime = 0;
	public double corr = 0;
    
    void reset() {
		p = new RunningQuadraticLeastSquares(0, 0, period.p);
        i = new RunningLeastSquares((int)period.i);
        d = new JamaLeastSquaresFit(derrDegree, period.d);
        dd = new JamaLeastSquaresFit(derrDegree, period.dd);
        defaultValue.clear();
        starttime = 0;
    }
    
    String description;
    public PidControl(String name) { 
    	reset();
    	description = name;
    }
    double lastVal, drms;
    double add(double val, long time) {
        if (starttime == 0) 
        	starttime = time;
        lastVal = val;
        
        double n = ((double) (time - starttime)) / 1000;
        if (Double.isNaN(val) || Double.isInfinite(val)) { 
        	val = Double.NaN;
        	d.removeAged(n);
        	dd.removeAged(n);
        	p.trimToSize(n);
        } else {         
	        val += manualTrim;
	        d.add(n, val);
	        dd.add(n, val);
	        p.add(n, val);
	        i.add(n, val);
        }
        
        err.p = p.calculate() * gain.p;
                
        drms = d.rmsError();
        if (d.size() < fadeCountMin || Double.isNaN(drms) || 
        		drms > qualityFadeThreshold * (qualityFadeGain + 1))
        	quality = 0;
        else if (drms < qualityFadeThreshold)  
        	quality = 1.0;
        else   
        	quality = 1.0 - ( drms / qualityFadeThreshold - 1) / qualityFadeGain;  
     
        if (d.size() >= fadeCountMin && d.size() < fadeCountMax) 
        	quality *= ((double)d.size() - fadeCountMin) / (fadeCountMax - fadeCountMin);
        quality *= quality;
        
        err.d = d.slope(n, 1) * gain.d; 
        
        err.dd = dd.slope(n, 2) * gain.dd;
                
        /*	    
 		* double ierr = i.predict(n) / ierrorThreshold;
	    err.i += ierr * ierr * ierr * gain.i;
	    err.i = Math.min(Math.max(err.i, -ierrorLimit), ierrorLimit);	        
	    */
	    err.i = 0;
               
	    corr = -(err.p + err.d + err.i + err.l) * finalGain * quality + 
	    	defaultValue.calculate() * (1 - quality);
	    defaultValue.add(corr);
	    
	    return corr;
    }


    void copySettings(PidControl pid) { 
    	gain = pid.gain.clone();
    	period = pid.period.clone();
    	finalGain = pid.finalGain;
    	this.qualityFadeThreshold =  pid.qualityFadeThreshold;
    	this.qualityFadeGain = pid.qualityFadeGain;
    	this.manualTrim = pid.manualTrim;    	
    }
}
 
