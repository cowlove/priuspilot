import java.awt.Point;
import java.awt.image.BufferedImage;
import java.lang.reflect.Array;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;

import java.awt.Rectangle;

//import laneDetector;

/**
 * <p><em>This software has been released into the public domain.
 * <strong>Please read the notes in this source file for additional information.
 * </strong></em></p>
 * 
 * <p>This class provides a configurable implementation of the Canny edge
 * detection algorithm. This classic algorithm has a number of shortcomings,
 * but remains an effective tool in many scenarios. <em>This class is designed
 * for single threaded use only.</em></p>
 * 
 * <p>Sample usage:</p>
 * 
 * <pre><code>
 * //create the detector
 * CannyEdgeDetector detector = new CannyEdgeDetector();
 * //adjust its parameters as desired
 * detector.setLowThreshold(0.5f);
 * detector.setHighThreshold(1f);
 * //apply it to an image
 * detector.setSourceImage(frame);
 * detector.process();
 * BufferedImage edges = detector.getEdgesImage();
 * </code></pre>lan
 * 
 * <p>For a more complete understanding of this edge detector's parameters
 * consult an explanation of the algorithm.</p>
 * 
 * @author Tom Gibara
 *
 */

class CannyResults { 
	CannyResults(int h, int w) { 
		this.h = h; this.w = w;
		results = new Integer[h * w];
	}
	int w, h;
	Integer [] results;
	int last = 0, index = 0, length = 0;
	
	void rewind() { last = 0; index = 0; }
	void clear() { rewind(); length = 0; l.clear(); }
	ArrayList<Point> l = new ArrayList<Point>();
	
	void add(int x, int y) {
		l.add(new Point(x, y));
/*		int diff = x + y * w - last;
		while(diff > results[0].MAX_VALUE) {
			results[index++] = results[0].MAX_VALUE;
			diff -= results[0].MAX_VALUE;
		}
		if (diff > 0) 
			results[index++] = diff;
		length = index;
		last += diff;
		*/
	}
	Point next = new Point(0, 0);
}

public class CannyEdgeDetector {
	public CannyResults results = new CannyResults(1, 1);
;
	// statics
	
	private final static float GAUSSIAN_CUT_OFF = 0.005f;
	public final static float MAGNITUDE_SCALE = 100;
	private final static float MAGNITUDE_LIMIT = 1000;
	private final static int MAGNITUDE_MAX = (int) (MAGNITUDE_SCALE * MAGNITUDE_LIMIT);

	// fields
	public ScanZonePair zones = new ScanZonePair();
	int yend(int x) { return zones.yend(x); }
	int ystart(int x) { return zones.ystart(x); }
	
	// new stuff to limit the canny processing to the area between new lines. 
	// currently unused, need to modify all iteration loops to only go from
	// xstart(y) to xend(y) for each y.  May be more diff, possibly need
	// ystart(x) and yend(x) for loops that cannot be turned inside out. 
	/*
	int xstart(int y) { 
		return Math.max(0, (m1 == 0 && b1 == 0) ? 0 : (int)((y - b1) / m1));
	}
	int xend(int y) { 
		return Math.min(width, (m2 == 0 && b2 == 0) ? width : (int)((y - b2) / m2));
	}
	*/
	int height;
	private int width;
	private int picsize;
	private int[] data;
	//private int[] magnitude;
	
	public float gaussianKernelRadius;
	public float lowThreshold;
	public float highThreshold;
	public int gaussianKernelWidth;
	private boolean contrastNormalized;

	private float[] xConv;
	private float[] yConv;
	private int[] xGradient;
	private int[] yGradient;
	
	static final int ISCALE = 30;
	// constructors
	
	/**
	 * Constructs a new detector with default parameters.
	 */
	
	public CannyEdgeDetector() {
		lowThreshold = 2.5f;
		highThreshold = 7.5f;
		gaussianKernelRadius = 2f;
		gaussianKernelWidth = 16;
		contrastNormalized = false;
	}

	// accessors
	
	/**
	 * The low threshold for hysteresis. The default value is 2.5.
	 * 
	 * @return the low hysteresis threshold
	 */
	
	public float getLowThreshold() {
		return lowThreshold;
	}
	
	/**
	 * Sets the low threshold for hysteresis. Suitable values for this parameter
	 * must be determined experimentally for each application. It is nonsensical
	 * (though not prohibited) for this value to exceed the high threshold value.
	 * 
	 * @param threshold a low hysteresis threshold
	 */
	
	public void setLowThreshold(float threshold) {
		if (threshold < 0) throw new IllegalArgumentException();
		lowThreshold = threshold;
	}
 
	/**
	 * The high threshold for hysteresis. The default value is 7.5.
	 * 
	 * @return the high hysteresis threshold
	 */
	
	public float getHighThreshold() {
		return highThreshold;
	}
	
	/**
	 * Sets the high threshold for hysteresis. Suitable values for this
	 * parameter must be determined experimentally for each application. It is
	 * nonsensical (though not prohibited) for this value to be less than the
	 * low threshold value.
	 * 
	 * @param threshold a high hysteresis threshold
	 */
	
	public void setHighThreshold(float threshold) {
		if (threshold < 0) throw new IllegalArgumentException();
		highThreshold = threshold;
	}

	/**
	 * The number of pixels across which the Gaussian kernel is applied.
	 * The default value is 16.
	 * 
	 * @return the radius of the convolution operation in pixels
	 */
	
	public int getGaussianKernelWidth() {
		return gaussianKernelWidth;
	}
	
	/**
	 * The number of pixels across which the Gaussian kernel is applied.
	 * This implementation will reduce the radius if the contribution of pixel
	 * values is deemed negligable, so this is actually a maximum radius.
	 * 
	 * @param gaussianKernelWidth a radius for the convolution operation in
	 * pixels, at least 2.
	 */
	
	public void setGaussianKernelWidth(int gaussianKernelWidth) {
		if (gaussianKernelWidth < 2) throw new IllegalArgumentException();
		this.gaussianKernelWidth = gaussianKernelWidth;
	} 

	/**
	 * The radius of the Gaussian convolution kernel used to smooth the source
	 * image prio
		detector.setGaussianKernelRadius(30)r to gradient calculation. The default value is 16.
	 * 
	 * @return the Gaussian kernel radius in pixels
	 */
	
	public float getGaussianKernelRadius() {
		return gaussianKernelRadius;
	}
	
	/**
	 * Sets the radius of the Gaussian convolution kernel used to smooth the
	 * source image prior to gradient calculation.
	 * 
	 * @return a Gaussian kernel radius in pixels, must exceed 0.1f.
	 */
	
	public void setGaussianKernelRadius(float gaussianKernelRadius) {
		if (gaussianKernelRadius < 0.1f) throw new IllegalArgumentException();
		this.gaussianKernelRadius = gaussianKernelRadius;
	}
	
	/**
	 * Whether the luminance data extracted from the source image is normalized
	 * by linearizing its histogram prior to edge extraction. The default value
	 * is false.
	 * 
	 * @return whether the contrast is normalized
	 */
	
	public boolean isContrastNormalized() {
		return contrastNormalized;
	}
	
	/**
	 * Sets whether the contrast is normalized
	 * @param contrastNormalized true if the contrast should be normalized,
	 * false otherwise
	 */
	
	public void setContrastNormalized(boolean contrastNormalized) {
		this.contrastNormalized = contrastNormalized;
	}
	
	// methods

	
	public void processData(OriginalImage i, Rectangle r) { 
		if (r == null) 
			r = new Rectangle(0, 0, i.width, i.height);
		width = r.width;
		height = r.height;
		zones.height = height;
		picsize = width * height;
		initArrays();
	
		for(int x = 0; x < r.width; x++) {
			int lasty = yend(x);
			for (int y = ystart(x); y < lasty; y++) {
				data[x + y * width] = i.getPixelLum(r.x + x, r.y + y);
			}
		}

		process2();
	}
	/*
	public void processData(int w, int h, byte [] pic) { 
		width = w;
		height = h;
		zones.height = height;
		picsize = width * height;
		initArrays();
	
		for(int x = 0; x < width; x++) {
			int lasty = yend(x);
			for (int y = ystart(x); y < lasty; y++) {
				int i = x + y * width;
				int b = (int)pic[i * 3 + 0] & 0xff;
				int g = (int)pic[i * 3 + 1] & 0xff;
	            int r = (int)pic[i * 3 + 2] & 0xff;
				data[i] = luminance(r, g, b);
				//magnitude[i] = 0;
			}
		}

		process2();
	}
	*/

	public void process2() {
		if (contrastNormalized) normalizeContrast();
		computeGradients(gaussianKernelRadius, gaussianKernelWidth);
	}

	public void process3() { 
		int low = Math.round(lowThreshold * MAGNITUDE_SCALE);
		int high = Math.round( highThreshold * MAGNITUDE_SCALE);
		performHysteresis(low, high);
		//thresholdEdges();
		//writeEdges(data);
	}

	public int [] getData() { return data; } 
	
	private void initArrays() {
		if (data == null || picsize != data.length) {
			data = new int[picsize];
			//magnitude = new int[picsize];

			xConv = new float[picsize];
			yConv = new float[picsize];
			xGradient = new int[picsize];
			yGradient = new int[picsize];
		}
		// TODO- figure out border artifact problems, this is 
		// pretty inefficient
		data = new int[picsize];
	}

	float kernel[];
	float diffKernel[];
	int kwidth;

	int oldKernelWidth = 0;
	float oldKernelRadius = 0;
	public void makeKernel(float kernelRadius, int kernelWidth) { 
		//generate the gaussian convolution masks, cache them until kernelWidth or kernelRadius changes
		
		if (oldKernelWidth != kernelWidth || oldKernelRadius != kernelRadius) {
			kernel = new float[kernelWidth];
			diffKernel = new float[kernelWidth];
			for (kwidth = 0; kwidth < kernelWidth; kwidth++) {
				float g1 = gaussian(kwidth, kernelRadius);
				if (g1 <= GAUSSIAN_CUT_OFF && kwidth >= 2) break;
				float g2 = gaussian(kwidth - 0.5f, kernelRadius);
				float g3 = gaussian(kwidth + 0.5f, kernelRadius);
				kernel[kwidth] = (g1 + g2 + g3) / 3f / (2f * (float) Math.PI * kernelRadius * kernelRadius);
				diffKernel[kwidth] = g3 - g2;
			}
			oldKernelRadius = kernelRadius;
			oldKernelWidth = kernelWidth;
		}
	}	
	
	
	// do gradients for column x.  Needs convultion results xConv/yConv to be completed
	// up to column and including (x + kwidth - 1)
	private void doGradients(int x) {
		int initY = width * (ystart(x) + (kwidth - 1));
		int maxY = width * (yend(x) - (kwidth - 1));
		for (int y = initY; y < maxY; y += width) {
			float sum = 0f;
			int index = x + y;
			for (int i = 1; i < kwidth; i++)
				sum += diffKernel[i] * (yConv[index - i] - yConv[index + i]);

			xGradient[index] = (int)(sum * ISCALE);
		}

		for (int y = initY; y < maxY; y += width) {
			float sum = 0.0f;
			int index = x + y;
			int yOffset = width;
			for (int i = 1; i < kwidth; i++) {
				sum += diffKernel[i] * (xConv[index - yOffset] - xConv[index + yOffset]);
				yOffset += width;
			}
			yGradient[index] = (int)(sum * ISCALE);
		}
	}

	
	int hypot(int a, int b) { 
		return Math.abs(a) + Math.abs(b);
	}
	// compute magnitude for column x.  Needs gradients to be complete through
	// column x + 1, inclusive.  
	void doMagnitude(int x) { 

		// clear the top and bottom fringes of this column
		int maxY = Math.min(height, ystart(x) + kwidth);
		for(int y = ystart(x); y < maxY; y++) 
			data[x + y * width] = 0;
		maxY = yend(x);
		for(int y = Math.max(0, yend(x) - kwidth); y < maxY; y++) 
			data[x + y * width] = 0;
		
		
		int initY = width * (ystart(x) + kwidth);
		maxY = width * (yend(x) - (kwidth));
		for (int y = initY; y < maxY; y += width) {
			int index = x + y;
			int indexN = index - width;
			int indexS = index + width;
			int indexW = index - 1;
			int indexE = index + 1;
			int indexNW = indexN - 1;
			int indexNE = indexN + 1;
			int indexSW = indexS - 1;
			int indexSE = indexS + 1;
			
			final int xGrad = (int)(xGradient[index]);
			final int yGrad = (int)(yGradient[index]);
			final int gradMag = Math.abs(xGrad) + Math.abs(yGrad);

			//perform non-maximal supressionarray
			final int nMag = Math.abs(xGradient[indexN]) + Math.abs(yGradient[indexN]);
			final int sMag = Math.abs(xGradient[indexS]) + Math.abs(yGradient[indexS]);
			final int wMag = Math.abs(xGradient[indexW]) + Math.abs(yGradient[indexW]);
			final int eMag = Math.abs(xGradient[indexE]) + Math.abs(yGradient[indexE]);
			final int neMag = Math.abs(xGradient[indexNE]) + Math.abs(yGradient[indexNE]);
			final int seMag = Math.abs(xGradient[indexSE]) + Math.abs(yGradient[indexSE]);
			final int swMag = Math.abs(xGradient[indexSW]) + Math.abs(yGradient[indexSW]);
			final int nwMag = Math.abs(xGradient[indexNW]) + Math.abs(yGradient[indexNW]);
			int tmp;
			/*
			 * An explanation of what's happening here, for those who want
			 * to understand the source: This performs the "non-maximal
			 * supression" phase of the Canny edge detection in which we
			 * need to compare the gradient magnitude to that in the
			 * direction of the gradient; only if the value is a local
			 * maximum do we consider the point as an edge candidate.
			 * 
			 * We need to break the comparison into a number of different
			 * cases depending on the gradient direction so that the
			 * appropriate values can be used. To avoid computing the
			 * gradient direction, we use two simple comparisons: first we
			 * check that the partial derivatives have the same sign (1)
			 * and then we check which is larger (2). As a consequence, we
			 * have reduced the problem to one of four identical cases that
			 * each test the central gradient magnitude against the values at
			 * two points with 'identical support'; what this means is that
			 * the geometry required to accurately interpolate the magnitude
			 * of gradient function at those points has an identical
			 * geometry (upto right-angled-rotation/reflection).
			 * 
			 * When comparing the central gradient to the two interpolated
			 * values, we avoid performing any divisions by multiplying both
			 * sides of each inequality by the greater of the two partial
			 * derivatives. The common comparand is stored in a temporary
			 * variable (3) and reused in the mirror case (4).
			 * 
			 */
			if (xGrad * yGrad <= 0 /*(1)*/
				? Math.abs(xGrad) >= Math.abs(yGrad) /*(2)*/
					? (tmp = Math.abs(xGrad * gradMag)) >= Math.abs(yGrad * neMag - (xGrad + yGrad) * eMag) /*(3)*/
						&& tmp > Math.abs(yGrad * swMag - (xGrad + yGrad) * wMag) /*(4)*/
					: (tmp = Math.abs(yGrad * gradMag)) >= Math.abs(xGrad * neMag - (yGrad + xGrad) * nMag) /*(3)*/
						&& tmp > Math.abs(xGrad * swMag - (yGrad + xGrad) * sMag) /*(4)*/
				: Math.abs(xGrad) >= Math.abs(yGrad) /*(2)*/
					? (tmp = Math.abs(xGrad * gradMag)) >= Math.abs(yGrad * seMag + (xGrad - yGrad) * eMag) /*(3)*/
						&& tmp > Math.abs(yGrad * nwMag + (xGrad - yGrad) * wMag) /*(4)*/
					: (tmp = Math.abs(yGrad * gradMag)) >= Math.abs(xGrad * seMag + (yGrad - xGrad) * sMag) /*(3)*/
						&& tmp > Math.abs(xGrad * nwMag + (yGrad - xGrad) * nMag) /*(4)*/
				) {
				data[index] = gradMag >= MAGNITUDE_LIMIT * ISCALE ? MAGNITUDE_MAX : (int) (MAGNITUDE_SCALE * gradMag / ISCALE);
				//NOTE: The orientation of the edge is not employed by this
				//implementation. It is a simple matter to compute it at
				//this point as: Math.atan2(yGrad, xGrad);
			} else {
				data[index] = 0;
			}
			//data[index] = magnitude[index];
			//if ((data[index] & VISITED_MASK) == VISITED_MASK)
			//	System.out.printf("shit magnitude too large 0x%x\n", data[index]);
		}
	}
		
	
	//NOTE: The elements of the method below (specifically the technique for
	//non-maximal suppression and the technique for gradient computation)
	//are derived from an implementation posted in the following forum (with the
	//clear intent of others using the code):
	//  http://forum.java.sun.com/thread.jspa?threadID=546211&start=45&tstart=0
	//My code effectively mimics the algorithm exhibited above.
	//Since I don't know the providence of the code that was posted it is a
	//possibility (though I think a very remote one) that this code violates
	//someone's intellectual property rights. If this concerns you feel free to
	//contact me for an alternative, though less efficient, implementation.
	
	private void computeGradients(float kernelRadius, int kernelWidth) {
		// set up kernel, diffKernel, and kwidth values
		makeKernel(gaussianKernelRadius, gaussianKernelWidth);
		
		int initX = kwidth - 1;
		int maxX = width - (kwidth - 1);
		int initY = width * (kwidth - 1);
		int maxY = width * (height - (kwidth - 1));
		int pixels = 0;

		//perform convolution in x and y directions
		for (int x = initX; x < maxX; x++) {
			initY = width * (ystart(x) + (kwidth - 1));
			maxY = width * (yend(x) - (kwidth - 1));
			for (int y = initY; y < maxY; y += width) {
				pixels++;
				if (y == initY)
					pixels += kwidth * 2;
				int index = x + y;
				float sumX = data[index] * kernel[0];
				float sumY = sumX;
				int xOffset = 1;
				int yOffset = width;
				for(; xOffset < kwidth ;) {
					sumY += kernel[xOffset] * (data[index - yOffset] + data[index + yOffset]);
					sumX += kernel[xOffset] * (data[index - xOffset] + data[index + xOffset]);
					yOffset += width;
					xOffset++;
				}
				
				yConv[index] = sumY;
				xConv[index] = sumX;
			}
			
			// figure out which columns now have enough data to proceed with gradient & mag computation 
			if (x >= initX + kwidth - 1) 
				doGradients(x - kwidth + 1);
			if (x >= initX + kwidth) 
				doMagnitude(x - kwidth);   // clobbers data[x - kwidth] if reusing data array
				
		}
		
		// clear left and right fringes left by kwidth 
		for(int x = 0; x < kwidth + 1; x++) {
			initY = ystart(x);
			maxY = yend(x);
			for(int y = initY; y < maxY; y++) { 
				data[x + y * width] = 0;
				data[width - x - 1 + y * width] = 0;
			}
		}
		for(int x = 0; x < width; x++) {
			initY = ystart(x);
			maxY = yend(x);
			for(int y = initY; y < maxY && y < initY + kwidth + 2; y++) {		
				data[x + y * width] = 0;
				data[x + (maxY - (y - initY) - 1)	 * width] = 0;
			}
		}
		
		//int bytes = pixels * (Integer.SIZE + Float.SIZE * 5);
		//System.out.println("pixels touched = " + pixels + ", approx " + (bytes / 1024) + "KB");	}
	}
	//NOTE: It is quite feasible to replace the implementation of this method
	//with one which only loosely approximates the hypot function. I've tested
	//simple approximations such as Math.abs(x) + Math.abs(y) and they work fine.
	static private float hypot(float x, float y) {
		//return (float) Math.hypot(x, y);
		return (float) Math.abs(x) + Math.abs(y);
	}
 
	static private float gaussian(float x, float sigma) {
		return (float) Math.exp(-(x * x) / (2f * sigma * sigma));
	}
	final int VISITED_MASK = 0xff000000;

	private void performHysteresis(int low, int high) {
		//NOTE: this implementation reuses the data array to store both
		//luminance data from the image, and edge intensity from the processing.
		//This is done for memory efficiency, other implementations may wish
		//to separate these functions.
		//Arrays.fill(data, 0);
		results.clear();
		for (int x = 0; x < width; x++) {
			int yend = yend(x);
			for (int y = ystart(x); y < yend; y++) {
				int offset = x + y * width;
				if ((data[offset] & VISITED_MASK) != VISITED_MASK) { 
					if (data[offset] >= high) {
						if (low < high) 
							follow(x, y, low);
						else { 
							data[offset] = -1;
							results.add(x, y);
						}
					} else {
						data[offset] = VISITED_MASK;
					}
				}
			}
	 	}
	}
 
	private void follow(int x1, int y1, int threshold) {
		int x0 = x1 == 0 ? x1 : x1 - 1;
		int x2 = x1 == width - 1 ? x1 : x1 + 1;
		int y0 = y1 == 0 ? y1 : y1 - 1;
		int y2 = y1 == height -1 ? y1 : y1 + 1;
		int i1 = x1 + y1 * width;
		
		//if (y1 < ystart(x1) || y1 > yend(x1))
		//	return;
		
		data[i1] = -1;
		results.add(x1, y1);
		for (int x = x0; x <= x2; x++) {
			for (int y = y0; y <= y2; y++) {
				int i2 = x + y * width;
				if ((y != y1 || x != x1) && (data[i2] & VISITED_MASK) != VISITED_MASK) { 
					if (data[i2] >= threshold) {
						follow(x, y, threshold);
						return;
					} 
					data[i2] = VISITED_MASK;
				}
			}
		}
	}

	/*
	
	private void performHysteresis(int low, int high) {
		//NOTE: this implementation reuses the data array to store both
		//luminance data from the image, and edge intensity from the processing.
		//This is done for memory efficiency, other implementations may wish
		//to separate these functions.
		Arrays.fill(data, 0);
 
		int offset = 0;
		for (int x = 0; x < width; x++) {
			//for (int y = ystart(x); y < yend(x); y++) {
			for (int y = 0; y < height; y++) {
				if (data[offset] == 0 && magnitude[offset] >= high) {
					follow(x, y, offset, low);
				}
				offset++;
			}
		}
 	}
 
	private void follow(int x1, int y1, int i1, int threshold) {
		int x0 = x1 == 0 ? x1 : x1 - 1;
		int x2 = x1 == width - 1 ? x1 : x1 + 1;
		int y0 = y1 == 0 ? y1 : y1 - 1;
		int y2 = y1 == height - 1 ? y1 : y1 + 1;
		
		data[i1] = magnitude[i1];
		int best = 0;
		int bestX = 0, bestY = 0, bestI = 0;
		for (int x = x0; x <= x2; x++) {
			for (int y = y0; y <= y2; y++) {
				int i2 = x + y * width;
				if ((y != y1 || x != x1) && data[i2] == 0 && magnitude[i2] >= threshold) {
						follow(x, y, i2, threshold);
						return;
				}
			}
		}
				/*
					&& (data[i2] & 0x00ffffff) >= best 
					&& y >= ystart(x) && y <= yend(x)) {
						best = data[i2] & 0xffffff;
						bestX = x;
						bestY = y;
						bestI = i2;
				}
				data[i2] = 0xff000000;
			}
		}
		if (best >= threshold) {
			follow(bestX, bestY, bestI, threshold);
		}	
		
			
	}
	*/
	
	private int luminance(float r, float g, float b) {
		return Math.round(0.299f * r + 0.587f * g + 0.114f * b);
	}

	private void normalizeContrast() {
		int[] histogram = new int[256];
		for (int i = 0; i < data.length; i++) {
			histogram[data[i]]++;
		}
		int[] remap = new int[256];
		int sum = 0;
		int j = 0;
		for (int i = 0; i < histogram.length; i++) {
			sum += histogram[i];
			int target = sum*255/picsize;
			for (int k = j+1; k <=target; k++) {
				remap[k] = i;
			}
			j = target;
		}
		
		for (int i = 0; i < data.length; i++) {
			data[i] = remap[data[i]];
		}
	} 
	
	private void thresholdEdges() {
		// TODO - work this into the threshold loop
		for (int i = 0; i < picsize; i++) {
			data[i] = data[i] == -1 ? -1 :	0xff000000;
		}
	} 
	
}
